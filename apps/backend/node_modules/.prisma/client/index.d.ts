
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model ProductionLine
 * 
 */
export type ProductionLine = $Result.DefaultSelection<Prisma.$ProductionLinePayload>
/**
 * Model Process
 * 
 */
export type Process = $Result.DefaultSelection<Prisma.$ProcessPayload>
/**
 * Model AuditLog
 * 
 */
export type AuditLog = $Result.DefaultSelection<Prisma.$AuditLogPayload>
/**
 * Model ProductionLineVersion
 * 
 */
export type ProductionLineVersion = $Result.DefaultSelection<Prisma.$ProductionLineVersionPayload>
/**
 * Model ProcessVersion
 * 
 */
export type ProcessVersion = $Result.DefaultSelection<Prisma.$ProcessVersionPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const ProductionLineStatus: {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  MAINTENANCE: 'MAINTENANCE'
};

export type ProductionLineStatus = (typeof ProductionLineStatus)[keyof typeof ProductionLineStatus]


export const ProcessStatus: {
  PENDING: 'PENDING',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  WAITING: 'WAITING',
  CANCELLED: 'CANCELLED'
};

export type ProcessStatus = (typeof ProcessStatus)[keyof typeof ProcessStatus]

}

export type ProductionLineStatus = $Enums.ProductionLineStatus

export const ProductionLineStatus: typeof $Enums.ProductionLineStatus

export type ProcessStatus = $Enums.ProcessStatus

export const ProcessStatus: typeof $Enums.ProcessStatus

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.productionLine`: Exposes CRUD operations for the **ProductionLine** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProductionLines
    * const productionLines = await prisma.productionLine.findMany()
    * ```
    */
  get productionLine(): Prisma.ProductionLineDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.process`: Exposes CRUD operations for the **Process** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Processes
    * const processes = await prisma.process.findMany()
    * ```
    */
  get process(): Prisma.ProcessDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.auditLog`: Exposes CRUD operations for the **AuditLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AuditLogs
    * const auditLogs = await prisma.auditLog.findMany()
    * ```
    */
  get auditLog(): Prisma.AuditLogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.productionLineVersion`: Exposes CRUD operations for the **ProductionLineVersion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProductionLineVersions
    * const productionLineVersions = await prisma.productionLineVersion.findMany()
    * ```
    */
  get productionLineVersion(): Prisma.ProductionLineVersionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.processVersion`: Exposes CRUD operations for the **ProcessVersion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProcessVersions
    * const processVersions = await prisma.processVersion.findMany()
    * ```
    */
  get processVersion(): Prisma.ProcessVersionDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.10.1
   * Query Engine version: 9b628578b3b7cae625e8c927178f15a170e74a9c
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    ProductionLine: 'ProductionLine',
    Process: 'Process',
    AuditLog: 'AuditLog',
    ProductionLineVersion: 'ProductionLineVersion',
    ProcessVersion: 'ProcessVersion'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "productionLine" | "process" | "auditLog" | "productionLineVersion" | "processVersion"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      ProductionLine: {
        payload: Prisma.$ProductionLinePayload<ExtArgs>
        fields: Prisma.ProductionLineFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductionLineFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductionLinePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductionLineFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductionLinePayload>
          }
          findFirst: {
            args: Prisma.ProductionLineFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductionLinePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductionLineFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductionLinePayload>
          }
          findMany: {
            args: Prisma.ProductionLineFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductionLinePayload>[]
          }
          create: {
            args: Prisma.ProductionLineCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductionLinePayload>
          }
          createMany: {
            args: Prisma.ProductionLineCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProductionLineCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductionLinePayload>[]
          }
          delete: {
            args: Prisma.ProductionLineDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductionLinePayload>
          }
          update: {
            args: Prisma.ProductionLineUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductionLinePayload>
          }
          deleteMany: {
            args: Prisma.ProductionLineDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProductionLineUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProductionLineUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductionLinePayload>[]
          }
          upsert: {
            args: Prisma.ProductionLineUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductionLinePayload>
          }
          aggregate: {
            args: Prisma.ProductionLineAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProductionLine>
          }
          groupBy: {
            args: Prisma.ProductionLineGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductionLineGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductionLineCountArgs<ExtArgs>
            result: $Utils.Optional<ProductionLineCountAggregateOutputType> | number
          }
        }
      }
      Process: {
        payload: Prisma.$ProcessPayload<ExtArgs>
        fields: Prisma.ProcessFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProcessFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProcessFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessPayload>
          }
          findFirst: {
            args: Prisma.ProcessFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProcessFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessPayload>
          }
          findMany: {
            args: Prisma.ProcessFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessPayload>[]
          }
          create: {
            args: Prisma.ProcessCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessPayload>
          }
          createMany: {
            args: Prisma.ProcessCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProcessCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessPayload>[]
          }
          delete: {
            args: Prisma.ProcessDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessPayload>
          }
          update: {
            args: Prisma.ProcessUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessPayload>
          }
          deleteMany: {
            args: Prisma.ProcessDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProcessUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProcessUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessPayload>[]
          }
          upsert: {
            args: Prisma.ProcessUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessPayload>
          }
          aggregate: {
            args: Prisma.ProcessAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProcess>
          }
          groupBy: {
            args: Prisma.ProcessGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProcessGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProcessCountArgs<ExtArgs>
            result: $Utils.Optional<ProcessCountAggregateOutputType> | number
          }
        }
      }
      AuditLog: {
        payload: Prisma.$AuditLogPayload<ExtArgs>
        fields: Prisma.AuditLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuditLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuditLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findFirst: {
            args: Prisma.AuditLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuditLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findMany: {
            args: Prisma.AuditLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          create: {
            args: Prisma.AuditLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          createMany: {
            args: Prisma.AuditLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AuditLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          delete: {
            args: Prisma.AuditLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          update: {
            args: Prisma.AuditLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          deleteMany: {
            args: Prisma.AuditLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AuditLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AuditLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          upsert: {
            args: Prisma.AuditLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          aggregate: {
            args: Prisma.AuditLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuditLog>
          }
          groupBy: {
            args: Prisma.AuditLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<AuditLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuditLogCountArgs<ExtArgs>
            result: $Utils.Optional<AuditLogCountAggregateOutputType> | number
          }
        }
      }
      ProductionLineVersion: {
        payload: Prisma.$ProductionLineVersionPayload<ExtArgs>
        fields: Prisma.ProductionLineVersionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductionLineVersionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductionLineVersionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductionLineVersionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductionLineVersionPayload>
          }
          findFirst: {
            args: Prisma.ProductionLineVersionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductionLineVersionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductionLineVersionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductionLineVersionPayload>
          }
          findMany: {
            args: Prisma.ProductionLineVersionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductionLineVersionPayload>[]
          }
          create: {
            args: Prisma.ProductionLineVersionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductionLineVersionPayload>
          }
          createMany: {
            args: Prisma.ProductionLineVersionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProductionLineVersionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductionLineVersionPayload>[]
          }
          delete: {
            args: Prisma.ProductionLineVersionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductionLineVersionPayload>
          }
          update: {
            args: Prisma.ProductionLineVersionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductionLineVersionPayload>
          }
          deleteMany: {
            args: Prisma.ProductionLineVersionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProductionLineVersionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProductionLineVersionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductionLineVersionPayload>[]
          }
          upsert: {
            args: Prisma.ProductionLineVersionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductionLineVersionPayload>
          }
          aggregate: {
            args: Prisma.ProductionLineVersionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProductionLineVersion>
          }
          groupBy: {
            args: Prisma.ProductionLineVersionGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductionLineVersionGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductionLineVersionCountArgs<ExtArgs>
            result: $Utils.Optional<ProductionLineVersionCountAggregateOutputType> | number
          }
        }
      }
      ProcessVersion: {
        payload: Prisma.$ProcessVersionPayload<ExtArgs>
        fields: Prisma.ProcessVersionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProcessVersionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessVersionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProcessVersionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessVersionPayload>
          }
          findFirst: {
            args: Prisma.ProcessVersionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessVersionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProcessVersionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessVersionPayload>
          }
          findMany: {
            args: Prisma.ProcessVersionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessVersionPayload>[]
          }
          create: {
            args: Prisma.ProcessVersionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessVersionPayload>
          }
          createMany: {
            args: Prisma.ProcessVersionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProcessVersionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessVersionPayload>[]
          }
          delete: {
            args: Prisma.ProcessVersionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessVersionPayload>
          }
          update: {
            args: Prisma.ProcessVersionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessVersionPayload>
          }
          deleteMany: {
            args: Prisma.ProcessVersionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProcessVersionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProcessVersionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessVersionPayload>[]
          }
          upsert: {
            args: Prisma.ProcessVersionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessVersionPayload>
          }
          aggregate: {
            args: Prisma.ProcessVersionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProcessVersion>
          }
          groupBy: {
            args: Prisma.ProcessVersionGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProcessVersionGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProcessVersionCountArgs<ExtArgs>
            result: $Utils.Optional<ProcessVersionCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    productionLine?: ProductionLineOmit
    process?: ProcessOmit
    auditLog?: AuditLogOmit
    productionLineVersion?: ProductionLineVersionOmit
    processVersion?: ProcessVersionOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    auditLogs: number
    processVersionsCreated: number
    createdProcesses: number
    productionLineVersionsCreated: number
    createdProductionLines: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    auditLogs?: boolean | UserCountOutputTypeCountAuditLogsArgs
    processVersionsCreated?: boolean | UserCountOutputTypeCountProcessVersionsCreatedArgs
    createdProcesses?: boolean | UserCountOutputTypeCountCreatedProcessesArgs
    productionLineVersionsCreated?: boolean | UserCountOutputTypeCountProductionLineVersionsCreatedArgs
    createdProductionLines?: boolean | UserCountOutputTypeCountCreatedProductionLinesArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAuditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountProcessVersionsCreatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProcessVersionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedProcessesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProcessWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountProductionLineVersionsCreatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductionLineVersionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedProductionLinesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductionLineWhereInput
  }


  /**
   * Count Type ProductionLineCountOutputType
   */

  export type ProductionLineCountOutputType = {
    processes: number
    versions: number
  }

  export type ProductionLineCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    processes?: boolean | ProductionLineCountOutputTypeCountProcessesArgs
    versions?: boolean | ProductionLineCountOutputTypeCountVersionsArgs
  }

  // Custom InputTypes
  /**
   * ProductionLineCountOutputType without action
   */
  export type ProductionLineCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductionLineCountOutputType
     */
    select?: ProductionLineCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProductionLineCountOutputType without action
   */
  export type ProductionLineCountOutputTypeCountProcessesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProcessWhereInput
  }

  /**
   * ProductionLineCountOutputType without action
   */
  export type ProductionLineCountOutputTypeCountVersionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductionLineVersionWhereInput
  }


  /**
   * Count Type ProcessCountOutputType
   */

  export type ProcessCountOutputType = {
    versions: number
  }

  export type ProcessCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    versions?: boolean | ProcessCountOutputTypeCountVersionsArgs
  }

  // Custom InputTypes
  /**
   * ProcessCountOutputType without action
   */
  export type ProcessCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcessCountOutputType
     */
    select?: ProcessCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProcessCountOutputType without action
   */
  export type ProcessCountOutputTypeCountVersionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProcessVersionWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    firstName: string | null
    lastName: string | null
    role: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    firstName: string | null
    lastName: string | null
    role: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    firstName: number
    lastName: number
    role: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    firstName?: true
    lastName?: true
    role?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    firstName?: true
    lastName?: true
    role?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    firstName?: true
    lastName?: true
    role?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    password: string
    firstName: string | null
    lastName: string | null
    role: string
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    role?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    auditLogs?: boolean | User$auditLogsArgs<ExtArgs>
    processVersionsCreated?: boolean | User$processVersionsCreatedArgs<ExtArgs>
    createdProcesses?: boolean | User$createdProcessesArgs<ExtArgs>
    productionLineVersionsCreated?: boolean | User$productionLineVersionsCreatedArgs<ExtArgs>
    createdProductionLines?: boolean | User$createdProductionLinesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    role?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    role?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    role?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "password" | "firstName" | "lastName" | "role" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    auditLogs?: boolean | User$auditLogsArgs<ExtArgs>
    processVersionsCreated?: boolean | User$processVersionsCreatedArgs<ExtArgs>
    createdProcesses?: boolean | User$createdProcessesArgs<ExtArgs>
    productionLineVersionsCreated?: boolean | User$productionLineVersionsCreatedArgs<ExtArgs>
    createdProductionLines?: boolean | User$createdProductionLinesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      auditLogs: Prisma.$AuditLogPayload<ExtArgs>[]
      processVersionsCreated: Prisma.$ProcessVersionPayload<ExtArgs>[]
      createdProcesses: Prisma.$ProcessPayload<ExtArgs>[]
      productionLineVersionsCreated: Prisma.$ProductionLineVersionPayload<ExtArgs>[]
      createdProductionLines: Prisma.$ProductionLinePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      password: string
      firstName: string | null
      lastName: string | null
      role: string
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    auditLogs<T extends User$auditLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$auditLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    processVersionsCreated<T extends User$processVersionsCreatedArgs<ExtArgs> = {}>(args?: Subset<T, User$processVersionsCreatedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProcessVersionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    createdProcesses<T extends User$createdProcessesArgs<ExtArgs> = {}>(args?: Subset<T, User$createdProcessesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProcessPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    productionLineVersionsCreated<T extends User$productionLineVersionsCreatedArgs<ExtArgs> = {}>(args?: Subset<T, User$productionLineVersionsCreatedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductionLineVersionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    createdProductionLines<T extends User$createdProductionLinesArgs<ExtArgs> = {}>(args?: Subset<T, User$createdProductionLinesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductionLinePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'String'>
    readonly isActive: FieldRef<"User", 'Boolean'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.auditLogs
   */
  export type User$auditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    cursor?: AuditLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * User.processVersionsCreated
   */
  export type User$processVersionsCreatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcessVersion
     */
    select?: ProcessVersionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProcessVersion
     */
    omit?: ProcessVersionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessVersionInclude<ExtArgs> | null
    where?: ProcessVersionWhereInput
    orderBy?: ProcessVersionOrderByWithRelationInput | ProcessVersionOrderByWithRelationInput[]
    cursor?: ProcessVersionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProcessVersionScalarFieldEnum | ProcessVersionScalarFieldEnum[]
  }

  /**
   * User.createdProcesses
   */
  export type User$createdProcessesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Process
     */
    select?: ProcessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Process
     */
    omit?: ProcessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessInclude<ExtArgs> | null
    where?: ProcessWhereInput
    orderBy?: ProcessOrderByWithRelationInput | ProcessOrderByWithRelationInput[]
    cursor?: ProcessWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProcessScalarFieldEnum | ProcessScalarFieldEnum[]
  }

  /**
   * User.productionLineVersionsCreated
   */
  export type User$productionLineVersionsCreatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductionLineVersion
     */
    select?: ProductionLineVersionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductionLineVersion
     */
    omit?: ProductionLineVersionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductionLineVersionInclude<ExtArgs> | null
    where?: ProductionLineVersionWhereInput
    orderBy?: ProductionLineVersionOrderByWithRelationInput | ProductionLineVersionOrderByWithRelationInput[]
    cursor?: ProductionLineVersionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductionLineVersionScalarFieldEnum | ProductionLineVersionScalarFieldEnum[]
  }

  /**
   * User.createdProductionLines
   */
  export type User$createdProductionLinesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductionLine
     */
    select?: ProductionLineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductionLine
     */
    omit?: ProductionLineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductionLineInclude<ExtArgs> | null
    where?: ProductionLineWhereInput
    orderBy?: ProductionLineOrderByWithRelationInput | ProductionLineOrderByWithRelationInput[]
    cursor?: ProductionLineWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductionLineScalarFieldEnum | ProductionLineScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model ProductionLine
   */

  export type AggregateProductionLine = {
    _count: ProductionLineCountAggregateOutputType | null
    _avg: ProductionLineAvgAggregateOutputType | null
    _sum: ProductionLineSumAggregateOutputType | null
    _min: ProductionLineMinAggregateOutputType | null
    _max: ProductionLineMaxAggregateOutputType | null
  }

  export type ProductionLineAvgAggregateOutputType = {
    version: number | null
  }

  export type ProductionLineSumAggregateOutputType = {
    version: number | null
  }

  export type ProductionLineMinAggregateOutputType = {
    id: string | null
    name: string | null
    status: $Enums.ProductionLineStatus | null
    version: number | null
    isActive: boolean | null
    parentId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdBy: string | null
    reason: string | null
  }

  export type ProductionLineMaxAggregateOutputType = {
    id: string | null
    name: string | null
    status: $Enums.ProductionLineStatus | null
    version: number | null
    isActive: boolean | null
    parentId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdBy: string | null
    reason: string | null
  }

  export type ProductionLineCountAggregateOutputType = {
    id: number
    name: number
    status: number
    version: number
    isActive: number
    parentId: number
    createdAt: number
    updatedAt: number
    createdBy: number
    reason: number
    _all: number
  }


  export type ProductionLineAvgAggregateInputType = {
    version?: true
  }

  export type ProductionLineSumAggregateInputType = {
    version?: true
  }

  export type ProductionLineMinAggregateInputType = {
    id?: true
    name?: true
    status?: true
    version?: true
    isActive?: true
    parentId?: true
    createdAt?: true
    updatedAt?: true
    createdBy?: true
    reason?: true
  }

  export type ProductionLineMaxAggregateInputType = {
    id?: true
    name?: true
    status?: true
    version?: true
    isActive?: true
    parentId?: true
    createdAt?: true
    updatedAt?: true
    createdBy?: true
    reason?: true
  }

  export type ProductionLineCountAggregateInputType = {
    id?: true
    name?: true
    status?: true
    version?: true
    isActive?: true
    parentId?: true
    createdAt?: true
    updatedAt?: true
    createdBy?: true
    reason?: true
    _all?: true
  }

  export type ProductionLineAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductionLine to aggregate.
     */
    where?: ProductionLineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductionLines to fetch.
     */
    orderBy?: ProductionLineOrderByWithRelationInput | ProductionLineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductionLineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductionLines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductionLines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProductionLines
    **/
    _count?: true | ProductionLineCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductionLineAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductionLineSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductionLineMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductionLineMaxAggregateInputType
  }

  export type GetProductionLineAggregateType<T extends ProductionLineAggregateArgs> = {
        [P in keyof T & keyof AggregateProductionLine]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProductionLine[P]>
      : GetScalarType<T[P], AggregateProductionLine[P]>
  }




  export type ProductionLineGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductionLineWhereInput
    orderBy?: ProductionLineOrderByWithAggregationInput | ProductionLineOrderByWithAggregationInput[]
    by: ProductionLineScalarFieldEnum[] | ProductionLineScalarFieldEnum
    having?: ProductionLineScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductionLineCountAggregateInputType | true
    _avg?: ProductionLineAvgAggregateInputType
    _sum?: ProductionLineSumAggregateInputType
    _min?: ProductionLineMinAggregateInputType
    _max?: ProductionLineMaxAggregateInputType
  }

  export type ProductionLineGroupByOutputType = {
    id: string
    name: string
    status: $Enums.ProductionLineStatus
    version: number
    isActive: boolean
    parentId: string | null
    createdAt: Date
    updatedAt: Date
    createdBy: string
    reason: string
    _count: ProductionLineCountAggregateOutputType | null
    _avg: ProductionLineAvgAggregateOutputType | null
    _sum: ProductionLineSumAggregateOutputType | null
    _min: ProductionLineMinAggregateOutputType | null
    _max: ProductionLineMaxAggregateOutputType | null
  }

  type GetProductionLineGroupByPayload<T extends ProductionLineGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductionLineGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductionLineGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductionLineGroupByOutputType[P]>
            : GetScalarType<T[P], ProductionLineGroupByOutputType[P]>
        }
      >
    >


  export type ProductionLineSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    status?: boolean
    version?: boolean
    isActive?: boolean
    parentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean
    reason?: boolean
    processes?: boolean | ProductionLine$processesArgs<ExtArgs>
    versions?: boolean | ProductionLine$versionsArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | ProductionLineCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productionLine"]>

  export type ProductionLineSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    status?: boolean
    version?: boolean
    isActive?: boolean
    parentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean
    reason?: boolean
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productionLine"]>

  export type ProductionLineSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    status?: boolean
    version?: boolean
    isActive?: boolean
    parentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean
    reason?: boolean
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productionLine"]>

  export type ProductionLineSelectScalar = {
    id?: boolean
    name?: boolean
    status?: boolean
    version?: boolean
    isActive?: boolean
    parentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean
    reason?: boolean
  }

  export type ProductionLineOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "status" | "version" | "isActive" | "parentId" | "createdAt" | "updatedAt" | "createdBy" | "reason", ExtArgs["result"]["productionLine"]>
  export type ProductionLineInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    processes?: boolean | ProductionLine$processesArgs<ExtArgs>
    versions?: boolean | ProductionLine$versionsArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | ProductionLineCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProductionLineIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ProductionLineIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ProductionLinePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProductionLine"
    objects: {
      processes: Prisma.$ProcessPayload<ExtArgs>[]
      versions: Prisma.$ProductionLineVersionPayload<ExtArgs>[]
      creator: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      status: $Enums.ProductionLineStatus
      version: number
      isActive: boolean
      parentId: string | null
      createdAt: Date
      updatedAt: Date
      createdBy: string
      reason: string
    }, ExtArgs["result"]["productionLine"]>
    composites: {}
  }

  type ProductionLineGetPayload<S extends boolean | null | undefined | ProductionLineDefaultArgs> = $Result.GetResult<Prisma.$ProductionLinePayload, S>

  type ProductionLineCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProductionLineFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProductionLineCountAggregateInputType | true
    }

  export interface ProductionLineDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProductionLine'], meta: { name: 'ProductionLine' } }
    /**
     * Find zero or one ProductionLine that matches the filter.
     * @param {ProductionLineFindUniqueArgs} args - Arguments to find a ProductionLine
     * @example
     * // Get one ProductionLine
     * const productionLine = await prisma.productionLine.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductionLineFindUniqueArgs>(args: SelectSubset<T, ProductionLineFindUniqueArgs<ExtArgs>>): Prisma__ProductionLineClient<$Result.GetResult<Prisma.$ProductionLinePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ProductionLine that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProductionLineFindUniqueOrThrowArgs} args - Arguments to find a ProductionLine
     * @example
     * // Get one ProductionLine
     * const productionLine = await prisma.productionLine.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductionLineFindUniqueOrThrowArgs>(args: SelectSubset<T, ProductionLineFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProductionLineClient<$Result.GetResult<Prisma.$ProductionLinePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProductionLine that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductionLineFindFirstArgs} args - Arguments to find a ProductionLine
     * @example
     * // Get one ProductionLine
     * const productionLine = await prisma.productionLine.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductionLineFindFirstArgs>(args?: SelectSubset<T, ProductionLineFindFirstArgs<ExtArgs>>): Prisma__ProductionLineClient<$Result.GetResult<Prisma.$ProductionLinePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProductionLine that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductionLineFindFirstOrThrowArgs} args - Arguments to find a ProductionLine
     * @example
     * // Get one ProductionLine
     * const productionLine = await prisma.productionLine.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductionLineFindFirstOrThrowArgs>(args?: SelectSubset<T, ProductionLineFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProductionLineClient<$Result.GetResult<Prisma.$ProductionLinePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProductionLines that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductionLineFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProductionLines
     * const productionLines = await prisma.productionLine.findMany()
     * 
     * // Get first 10 ProductionLines
     * const productionLines = await prisma.productionLine.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productionLineWithIdOnly = await prisma.productionLine.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProductionLineFindManyArgs>(args?: SelectSubset<T, ProductionLineFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductionLinePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ProductionLine.
     * @param {ProductionLineCreateArgs} args - Arguments to create a ProductionLine.
     * @example
     * // Create one ProductionLine
     * const ProductionLine = await prisma.productionLine.create({
     *   data: {
     *     // ... data to create a ProductionLine
     *   }
     * })
     * 
     */
    create<T extends ProductionLineCreateArgs>(args: SelectSubset<T, ProductionLineCreateArgs<ExtArgs>>): Prisma__ProductionLineClient<$Result.GetResult<Prisma.$ProductionLinePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ProductionLines.
     * @param {ProductionLineCreateManyArgs} args - Arguments to create many ProductionLines.
     * @example
     * // Create many ProductionLines
     * const productionLine = await prisma.productionLine.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProductionLineCreateManyArgs>(args?: SelectSubset<T, ProductionLineCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProductionLines and returns the data saved in the database.
     * @param {ProductionLineCreateManyAndReturnArgs} args - Arguments to create many ProductionLines.
     * @example
     * // Create many ProductionLines
     * const productionLine = await prisma.productionLine.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProductionLines and only return the `id`
     * const productionLineWithIdOnly = await prisma.productionLine.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProductionLineCreateManyAndReturnArgs>(args?: SelectSubset<T, ProductionLineCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductionLinePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ProductionLine.
     * @param {ProductionLineDeleteArgs} args - Arguments to delete one ProductionLine.
     * @example
     * // Delete one ProductionLine
     * const ProductionLine = await prisma.productionLine.delete({
     *   where: {
     *     // ... filter to delete one ProductionLine
     *   }
     * })
     * 
     */
    delete<T extends ProductionLineDeleteArgs>(args: SelectSubset<T, ProductionLineDeleteArgs<ExtArgs>>): Prisma__ProductionLineClient<$Result.GetResult<Prisma.$ProductionLinePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ProductionLine.
     * @param {ProductionLineUpdateArgs} args - Arguments to update one ProductionLine.
     * @example
     * // Update one ProductionLine
     * const productionLine = await prisma.productionLine.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProductionLineUpdateArgs>(args: SelectSubset<T, ProductionLineUpdateArgs<ExtArgs>>): Prisma__ProductionLineClient<$Result.GetResult<Prisma.$ProductionLinePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ProductionLines.
     * @param {ProductionLineDeleteManyArgs} args - Arguments to filter ProductionLines to delete.
     * @example
     * // Delete a few ProductionLines
     * const { count } = await prisma.productionLine.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProductionLineDeleteManyArgs>(args?: SelectSubset<T, ProductionLineDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductionLines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductionLineUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProductionLines
     * const productionLine = await prisma.productionLine.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProductionLineUpdateManyArgs>(args: SelectSubset<T, ProductionLineUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductionLines and returns the data updated in the database.
     * @param {ProductionLineUpdateManyAndReturnArgs} args - Arguments to update many ProductionLines.
     * @example
     * // Update many ProductionLines
     * const productionLine = await prisma.productionLine.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ProductionLines and only return the `id`
     * const productionLineWithIdOnly = await prisma.productionLine.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProductionLineUpdateManyAndReturnArgs>(args: SelectSubset<T, ProductionLineUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductionLinePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ProductionLine.
     * @param {ProductionLineUpsertArgs} args - Arguments to update or create a ProductionLine.
     * @example
     * // Update or create a ProductionLine
     * const productionLine = await prisma.productionLine.upsert({
     *   create: {
     *     // ... data to create a ProductionLine
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProductionLine we want to update
     *   }
     * })
     */
    upsert<T extends ProductionLineUpsertArgs>(args: SelectSubset<T, ProductionLineUpsertArgs<ExtArgs>>): Prisma__ProductionLineClient<$Result.GetResult<Prisma.$ProductionLinePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ProductionLines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductionLineCountArgs} args - Arguments to filter ProductionLines to count.
     * @example
     * // Count the number of ProductionLines
     * const count = await prisma.productionLine.count({
     *   where: {
     *     // ... the filter for the ProductionLines we want to count
     *   }
     * })
    **/
    count<T extends ProductionLineCountArgs>(
      args?: Subset<T, ProductionLineCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductionLineCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProductionLine.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductionLineAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductionLineAggregateArgs>(args: Subset<T, ProductionLineAggregateArgs>): Prisma.PrismaPromise<GetProductionLineAggregateType<T>>

    /**
     * Group by ProductionLine.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductionLineGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductionLineGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductionLineGroupByArgs['orderBy'] }
        : { orderBy?: ProductionLineGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductionLineGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductionLineGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProductionLine model
   */
  readonly fields: ProductionLineFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProductionLine.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductionLineClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    processes<T extends ProductionLine$processesArgs<ExtArgs> = {}>(args?: Subset<T, ProductionLine$processesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProcessPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    versions<T extends ProductionLine$versionsArgs<ExtArgs> = {}>(args?: Subset<T, ProductionLine$versionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductionLineVersionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    creator<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProductionLine model
   */
  interface ProductionLineFieldRefs {
    readonly id: FieldRef<"ProductionLine", 'String'>
    readonly name: FieldRef<"ProductionLine", 'String'>
    readonly status: FieldRef<"ProductionLine", 'ProductionLineStatus'>
    readonly version: FieldRef<"ProductionLine", 'Int'>
    readonly isActive: FieldRef<"ProductionLine", 'Boolean'>
    readonly parentId: FieldRef<"ProductionLine", 'String'>
    readonly createdAt: FieldRef<"ProductionLine", 'DateTime'>
    readonly updatedAt: FieldRef<"ProductionLine", 'DateTime'>
    readonly createdBy: FieldRef<"ProductionLine", 'String'>
    readonly reason: FieldRef<"ProductionLine", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ProductionLine findUnique
   */
  export type ProductionLineFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductionLine
     */
    select?: ProductionLineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductionLine
     */
    omit?: ProductionLineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductionLineInclude<ExtArgs> | null
    /**
     * Filter, which ProductionLine to fetch.
     */
    where: ProductionLineWhereUniqueInput
  }

  /**
   * ProductionLine findUniqueOrThrow
   */
  export type ProductionLineFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductionLine
     */
    select?: ProductionLineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductionLine
     */
    omit?: ProductionLineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductionLineInclude<ExtArgs> | null
    /**
     * Filter, which ProductionLine to fetch.
     */
    where: ProductionLineWhereUniqueInput
  }

  /**
   * ProductionLine findFirst
   */
  export type ProductionLineFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductionLine
     */
    select?: ProductionLineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductionLine
     */
    omit?: ProductionLineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductionLineInclude<ExtArgs> | null
    /**
     * Filter, which ProductionLine to fetch.
     */
    where?: ProductionLineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductionLines to fetch.
     */
    orderBy?: ProductionLineOrderByWithRelationInput | ProductionLineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductionLines.
     */
    cursor?: ProductionLineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductionLines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductionLines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductionLines.
     */
    distinct?: ProductionLineScalarFieldEnum | ProductionLineScalarFieldEnum[]
  }

  /**
   * ProductionLine findFirstOrThrow
   */
  export type ProductionLineFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductionLine
     */
    select?: ProductionLineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductionLine
     */
    omit?: ProductionLineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductionLineInclude<ExtArgs> | null
    /**
     * Filter, which ProductionLine to fetch.
     */
    where?: ProductionLineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductionLines to fetch.
     */
    orderBy?: ProductionLineOrderByWithRelationInput | ProductionLineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductionLines.
     */
    cursor?: ProductionLineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductionLines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductionLines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductionLines.
     */
    distinct?: ProductionLineScalarFieldEnum | ProductionLineScalarFieldEnum[]
  }

  /**
   * ProductionLine findMany
   */
  export type ProductionLineFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductionLine
     */
    select?: ProductionLineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductionLine
     */
    omit?: ProductionLineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductionLineInclude<ExtArgs> | null
    /**
     * Filter, which ProductionLines to fetch.
     */
    where?: ProductionLineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductionLines to fetch.
     */
    orderBy?: ProductionLineOrderByWithRelationInput | ProductionLineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProductionLines.
     */
    cursor?: ProductionLineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductionLines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductionLines.
     */
    skip?: number
    distinct?: ProductionLineScalarFieldEnum | ProductionLineScalarFieldEnum[]
  }

  /**
   * ProductionLine create
   */
  export type ProductionLineCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductionLine
     */
    select?: ProductionLineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductionLine
     */
    omit?: ProductionLineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductionLineInclude<ExtArgs> | null
    /**
     * The data needed to create a ProductionLine.
     */
    data: XOR<ProductionLineCreateInput, ProductionLineUncheckedCreateInput>
  }

  /**
   * ProductionLine createMany
   */
  export type ProductionLineCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProductionLines.
     */
    data: ProductionLineCreateManyInput | ProductionLineCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProductionLine createManyAndReturn
   */
  export type ProductionLineCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductionLine
     */
    select?: ProductionLineSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProductionLine
     */
    omit?: ProductionLineOmit<ExtArgs> | null
    /**
     * The data used to create many ProductionLines.
     */
    data: ProductionLineCreateManyInput | ProductionLineCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductionLineIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProductionLine update
   */
  export type ProductionLineUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductionLine
     */
    select?: ProductionLineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductionLine
     */
    omit?: ProductionLineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductionLineInclude<ExtArgs> | null
    /**
     * The data needed to update a ProductionLine.
     */
    data: XOR<ProductionLineUpdateInput, ProductionLineUncheckedUpdateInput>
    /**
     * Choose, which ProductionLine to update.
     */
    where: ProductionLineWhereUniqueInput
  }

  /**
   * ProductionLine updateMany
   */
  export type ProductionLineUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProductionLines.
     */
    data: XOR<ProductionLineUpdateManyMutationInput, ProductionLineUncheckedUpdateManyInput>
    /**
     * Filter which ProductionLines to update
     */
    where?: ProductionLineWhereInput
    /**
     * Limit how many ProductionLines to update.
     */
    limit?: number
  }

  /**
   * ProductionLine updateManyAndReturn
   */
  export type ProductionLineUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductionLine
     */
    select?: ProductionLineSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProductionLine
     */
    omit?: ProductionLineOmit<ExtArgs> | null
    /**
     * The data used to update ProductionLines.
     */
    data: XOR<ProductionLineUpdateManyMutationInput, ProductionLineUncheckedUpdateManyInput>
    /**
     * Filter which ProductionLines to update
     */
    where?: ProductionLineWhereInput
    /**
     * Limit how many ProductionLines to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductionLineIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProductionLine upsert
   */
  export type ProductionLineUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductionLine
     */
    select?: ProductionLineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductionLine
     */
    omit?: ProductionLineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductionLineInclude<ExtArgs> | null
    /**
     * The filter to search for the ProductionLine to update in case it exists.
     */
    where: ProductionLineWhereUniqueInput
    /**
     * In case the ProductionLine found by the `where` argument doesn't exist, create a new ProductionLine with this data.
     */
    create: XOR<ProductionLineCreateInput, ProductionLineUncheckedCreateInput>
    /**
     * In case the ProductionLine was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductionLineUpdateInput, ProductionLineUncheckedUpdateInput>
  }

  /**
   * ProductionLine delete
   */
  export type ProductionLineDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductionLine
     */
    select?: ProductionLineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductionLine
     */
    omit?: ProductionLineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductionLineInclude<ExtArgs> | null
    /**
     * Filter which ProductionLine to delete.
     */
    where: ProductionLineWhereUniqueInput
  }

  /**
   * ProductionLine deleteMany
   */
  export type ProductionLineDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductionLines to delete
     */
    where?: ProductionLineWhereInput
    /**
     * Limit how many ProductionLines to delete.
     */
    limit?: number
  }

  /**
   * ProductionLine.processes
   */
  export type ProductionLine$processesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Process
     */
    select?: ProcessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Process
     */
    omit?: ProcessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessInclude<ExtArgs> | null
    where?: ProcessWhereInput
    orderBy?: ProcessOrderByWithRelationInput | ProcessOrderByWithRelationInput[]
    cursor?: ProcessWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProcessScalarFieldEnum | ProcessScalarFieldEnum[]
  }

  /**
   * ProductionLine.versions
   */
  export type ProductionLine$versionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductionLineVersion
     */
    select?: ProductionLineVersionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductionLineVersion
     */
    omit?: ProductionLineVersionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductionLineVersionInclude<ExtArgs> | null
    where?: ProductionLineVersionWhereInput
    orderBy?: ProductionLineVersionOrderByWithRelationInput | ProductionLineVersionOrderByWithRelationInput[]
    cursor?: ProductionLineVersionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductionLineVersionScalarFieldEnum | ProductionLineVersionScalarFieldEnum[]
  }

  /**
   * ProductionLine without action
   */
  export type ProductionLineDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductionLine
     */
    select?: ProductionLineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductionLine
     */
    omit?: ProductionLineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductionLineInclude<ExtArgs> | null
  }


  /**
   * Model Process
   */

  export type AggregateProcess = {
    _count: ProcessCountAggregateOutputType | null
    _avg: ProcessAvgAggregateOutputType | null
    _sum: ProcessSumAggregateOutputType | null
    _min: ProcessMinAggregateOutputType | null
    _max: ProcessMaxAggregateOutputType | null
  }

  export type ProcessAvgAggregateOutputType = {
    duration: number | null
    progress: number | null
    x: number | null
    y: number | null
    version: number | null
  }

  export type ProcessSumAggregateOutputType = {
    duration: number | null
    progress: number | null
    x: number | null
    y: number | null
    version: number | null
  }

  export type ProcessMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    duration: number | null
    progress: number | null
    status: $Enums.ProcessStatus | null
    x: number | null
    y: number | null
    color: string | null
    version: number | null
    isActive: boolean | null
    parentId: string | null
    productionLineId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdBy: string | null
    reason: string | null
  }

  export type ProcessMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    duration: number | null
    progress: number | null
    status: $Enums.ProcessStatus | null
    x: number | null
    y: number | null
    color: string | null
    version: number | null
    isActive: boolean | null
    parentId: string | null
    productionLineId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdBy: string | null
    reason: string | null
  }

  export type ProcessCountAggregateOutputType = {
    id: number
    title: number
    description: number
    duration: number
    progress: number
    status: number
    x: number
    y: number
    color: number
    version: number
    isActive: number
    parentId: number
    productionLineId: number
    createdAt: number
    updatedAt: number
    createdBy: number
    reason: number
    _all: number
  }


  export type ProcessAvgAggregateInputType = {
    duration?: true
    progress?: true
    x?: true
    y?: true
    version?: true
  }

  export type ProcessSumAggregateInputType = {
    duration?: true
    progress?: true
    x?: true
    y?: true
    version?: true
  }

  export type ProcessMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    duration?: true
    progress?: true
    status?: true
    x?: true
    y?: true
    color?: true
    version?: true
    isActive?: true
    parentId?: true
    productionLineId?: true
    createdAt?: true
    updatedAt?: true
    createdBy?: true
    reason?: true
  }

  export type ProcessMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    duration?: true
    progress?: true
    status?: true
    x?: true
    y?: true
    color?: true
    version?: true
    isActive?: true
    parentId?: true
    productionLineId?: true
    createdAt?: true
    updatedAt?: true
    createdBy?: true
    reason?: true
  }

  export type ProcessCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    duration?: true
    progress?: true
    status?: true
    x?: true
    y?: true
    color?: true
    version?: true
    isActive?: true
    parentId?: true
    productionLineId?: true
    createdAt?: true
    updatedAt?: true
    createdBy?: true
    reason?: true
    _all?: true
  }

  export type ProcessAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Process to aggregate.
     */
    where?: ProcessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Processes to fetch.
     */
    orderBy?: ProcessOrderByWithRelationInput | ProcessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProcessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Processes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Processes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Processes
    **/
    _count?: true | ProcessCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProcessAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProcessSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProcessMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProcessMaxAggregateInputType
  }

  export type GetProcessAggregateType<T extends ProcessAggregateArgs> = {
        [P in keyof T & keyof AggregateProcess]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProcess[P]>
      : GetScalarType<T[P], AggregateProcess[P]>
  }




  export type ProcessGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProcessWhereInput
    orderBy?: ProcessOrderByWithAggregationInput | ProcessOrderByWithAggregationInput[]
    by: ProcessScalarFieldEnum[] | ProcessScalarFieldEnum
    having?: ProcessScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProcessCountAggregateInputType | true
    _avg?: ProcessAvgAggregateInputType
    _sum?: ProcessSumAggregateInputType
    _min?: ProcessMinAggregateInputType
    _max?: ProcessMaxAggregateInputType
  }

  export type ProcessGroupByOutputType = {
    id: string
    title: string
    description: string | null
    duration: number | null
    progress: number
    status: $Enums.ProcessStatus
    x: number
    y: number
    color: string
    version: number
    isActive: boolean
    parentId: string | null
    productionLineId: string
    createdAt: Date
    updatedAt: Date
    createdBy: string
    reason: string
    _count: ProcessCountAggregateOutputType | null
    _avg: ProcessAvgAggregateOutputType | null
    _sum: ProcessSumAggregateOutputType | null
    _min: ProcessMinAggregateOutputType | null
    _max: ProcessMaxAggregateOutputType | null
  }

  type GetProcessGroupByPayload<T extends ProcessGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProcessGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProcessGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProcessGroupByOutputType[P]>
            : GetScalarType<T[P], ProcessGroupByOutputType[P]>
        }
      >
    >


  export type ProcessSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    duration?: boolean
    progress?: boolean
    status?: boolean
    x?: boolean
    y?: boolean
    color?: boolean
    version?: boolean
    isActive?: boolean
    parentId?: boolean
    productionLineId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean
    reason?: boolean
    versions?: boolean | Process$versionsArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
    productionLine?: boolean | ProductionLineDefaultArgs<ExtArgs>
    _count?: boolean | ProcessCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["process"]>

  export type ProcessSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    duration?: boolean
    progress?: boolean
    status?: boolean
    x?: boolean
    y?: boolean
    color?: boolean
    version?: boolean
    isActive?: boolean
    parentId?: boolean
    productionLineId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean
    reason?: boolean
    creator?: boolean | UserDefaultArgs<ExtArgs>
    productionLine?: boolean | ProductionLineDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["process"]>

  export type ProcessSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    duration?: boolean
    progress?: boolean
    status?: boolean
    x?: boolean
    y?: boolean
    color?: boolean
    version?: boolean
    isActive?: boolean
    parentId?: boolean
    productionLineId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean
    reason?: boolean
    creator?: boolean | UserDefaultArgs<ExtArgs>
    productionLine?: boolean | ProductionLineDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["process"]>

  export type ProcessSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    duration?: boolean
    progress?: boolean
    status?: boolean
    x?: boolean
    y?: boolean
    color?: boolean
    version?: boolean
    isActive?: boolean
    parentId?: boolean
    productionLineId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean
    reason?: boolean
  }

  export type ProcessOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "duration" | "progress" | "status" | "x" | "y" | "color" | "version" | "isActive" | "parentId" | "productionLineId" | "createdAt" | "updatedAt" | "createdBy" | "reason", ExtArgs["result"]["process"]>
  export type ProcessInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    versions?: boolean | Process$versionsArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
    productionLine?: boolean | ProductionLineDefaultArgs<ExtArgs>
    _count?: boolean | ProcessCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProcessIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | UserDefaultArgs<ExtArgs>
    productionLine?: boolean | ProductionLineDefaultArgs<ExtArgs>
  }
  export type ProcessIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | UserDefaultArgs<ExtArgs>
    productionLine?: boolean | ProductionLineDefaultArgs<ExtArgs>
  }

  export type $ProcessPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Process"
    objects: {
      versions: Prisma.$ProcessVersionPayload<ExtArgs>[]
      creator: Prisma.$UserPayload<ExtArgs>
      productionLine: Prisma.$ProductionLinePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string | null
      duration: number | null
      progress: number
      status: $Enums.ProcessStatus
      x: number
      y: number
      color: string
      version: number
      isActive: boolean
      parentId: string | null
      productionLineId: string
      createdAt: Date
      updatedAt: Date
      createdBy: string
      reason: string
    }, ExtArgs["result"]["process"]>
    composites: {}
  }

  type ProcessGetPayload<S extends boolean | null | undefined | ProcessDefaultArgs> = $Result.GetResult<Prisma.$ProcessPayload, S>

  type ProcessCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProcessFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProcessCountAggregateInputType | true
    }

  export interface ProcessDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Process'], meta: { name: 'Process' } }
    /**
     * Find zero or one Process that matches the filter.
     * @param {ProcessFindUniqueArgs} args - Arguments to find a Process
     * @example
     * // Get one Process
     * const process = await prisma.process.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProcessFindUniqueArgs>(args: SelectSubset<T, ProcessFindUniqueArgs<ExtArgs>>): Prisma__ProcessClient<$Result.GetResult<Prisma.$ProcessPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Process that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProcessFindUniqueOrThrowArgs} args - Arguments to find a Process
     * @example
     * // Get one Process
     * const process = await prisma.process.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProcessFindUniqueOrThrowArgs>(args: SelectSubset<T, ProcessFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProcessClient<$Result.GetResult<Prisma.$ProcessPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Process that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcessFindFirstArgs} args - Arguments to find a Process
     * @example
     * // Get one Process
     * const process = await prisma.process.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProcessFindFirstArgs>(args?: SelectSubset<T, ProcessFindFirstArgs<ExtArgs>>): Prisma__ProcessClient<$Result.GetResult<Prisma.$ProcessPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Process that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcessFindFirstOrThrowArgs} args - Arguments to find a Process
     * @example
     * // Get one Process
     * const process = await prisma.process.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProcessFindFirstOrThrowArgs>(args?: SelectSubset<T, ProcessFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProcessClient<$Result.GetResult<Prisma.$ProcessPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Processes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcessFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Processes
     * const processes = await prisma.process.findMany()
     * 
     * // Get first 10 Processes
     * const processes = await prisma.process.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const processWithIdOnly = await prisma.process.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProcessFindManyArgs>(args?: SelectSubset<T, ProcessFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProcessPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Process.
     * @param {ProcessCreateArgs} args - Arguments to create a Process.
     * @example
     * // Create one Process
     * const Process = await prisma.process.create({
     *   data: {
     *     // ... data to create a Process
     *   }
     * })
     * 
     */
    create<T extends ProcessCreateArgs>(args: SelectSubset<T, ProcessCreateArgs<ExtArgs>>): Prisma__ProcessClient<$Result.GetResult<Prisma.$ProcessPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Processes.
     * @param {ProcessCreateManyArgs} args - Arguments to create many Processes.
     * @example
     * // Create many Processes
     * const process = await prisma.process.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProcessCreateManyArgs>(args?: SelectSubset<T, ProcessCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Processes and returns the data saved in the database.
     * @param {ProcessCreateManyAndReturnArgs} args - Arguments to create many Processes.
     * @example
     * // Create many Processes
     * const process = await prisma.process.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Processes and only return the `id`
     * const processWithIdOnly = await prisma.process.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProcessCreateManyAndReturnArgs>(args?: SelectSubset<T, ProcessCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProcessPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Process.
     * @param {ProcessDeleteArgs} args - Arguments to delete one Process.
     * @example
     * // Delete one Process
     * const Process = await prisma.process.delete({
     *   where: {
     *     // ... filter to delete one Process
     *   }
     * })
     * 
     */
    delete<T extends ProcessDeleteArgs>(args: SelectSubset<T, ProcessDeleteArgs<ExtArgs>>): Prisma__ProcessClient<$Result.GetResult<Prisma.$ProcessPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Process.
     * @param {ProcessUpdateArgs} args - Arguments to update one Process.
     * @example
     * // Update one Process
     * const process = await prisma.process.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProcessUpdateArgs>(args: SelectSubset<T, ProcessUpdateArgs<ExtArgs>>): Prisma__ProcessClient<$Result.GetResult<Prisma.$ProcessPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Processes.
     * @param {ProcessDeleteManyArgs} args - Arguments to filter Processes to delete.
     * @example
     * // Delete a few Processes
     * const { count } = await prisma.process.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProcessDeleteManyArgs>(args?: SelectSubset<T, ProcessDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Processes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcessUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Processes
     * const process = await prisma.process.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProcessUpdateManyArgs>(args: SelectSubset<T, ProcessUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Processes and returns the data updated in the database.
     * @param {ProcessUpdateManyAndReturnArgs} args - Arguments to update many Processes.
     * @example
     * // Update many Processes
     * const process = await prisma.process.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Processes and only return the `id`
     * const processWithIdOnly = await prisma.process.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProcessUpdateManyAndReturnArgs>(args: SelectSubset<T, ProcessUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProcessPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Process.
     * @param {ProcessUpsertArgs} args - Arguments to update or create a Process.
     * @example
     * // Update or create a Process
     * const process = await prisma.process.upsert({
     *   create: {
     *     // ... data to create a Process
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Process we want to update
     *   }
     * })
     */
    upsert<T extends ProcessUpsertArgs>(args: SelectSubset<T, ProcessUpsertArgs<ExtArgs>>): Prisma__ProcessClient<$Result.GetResult<Prisma.$ProcessPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Processes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcessCountArgs} args - Arguments to filter Processes to count.
     * @example
     * // Count the number of Processes
     * const count = await prisma.process.count({
     *   where: {
     *     // ... the filter for the Processes we want to count
     *   }
     * })
    **/
    count<T extends ProcessCountArgs>(
      args?: Subset<T, ProcessCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProcessCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Process.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcessAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProcessAggregateArgs>(args: Subset<T, ProcessAggregateArgs>): Prisma.PrismaPromise<GetProcessAggregateType<T>>

    /**
     * Group by Process.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcessGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProcessGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProcessGroupByArgs['orderBy'] }
        : { orderBy?: ProcessGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProcessGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProcessGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Process model
   */
  readonly fields: ProcessFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Process.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProcessClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    versions<T extends Process$versionsArgs<ExtArgs> = {}>(args?: Subset<T, Process$versionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProcessVersionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    creator<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    productionLine<T extends ProductionLineDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductionLineDefaultArgs<ExtArgs>>): Prisma__ProductionLineClient<$Result.GetResult<Prisma.$ProductionLinePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Process model
   */
  interface ProcessFieldRefs {
    readonly id: FieldRef<"Process", 'String'>
    readonly title: FieldRef<"Process", 'String'>
    readonly description: FieldRef<"Process", 'String'>
    readonly duration: FieldRef<"Process", 'Int'>
    readonly progress: FieldRef<"Process", 'Float'>
    readonly status: FieldRef<"Process", 'ProcessStatus'>
    readonly x: FieldRef<"Process", 'Float'>
    readonly y: FieldRef<"Process", 'Float'>
    readonly color: FieldRef<"Process", 'String'>
    readonly version: FieldRef<"Process", 'Int'>
    readonly isActive: FieldRef<"Process", 'Boolean'>
    readonly parentId: FieldRef<"Process", 'String'>
    readonly productionLineId: FieldRef<"Process", 'String'>
    readonly createdAt: FieldRef<"Process", 'DateTime'>
    readonly updatedAt: FieldRef<"Process", 'DateTime'>
    readonly createdBy: FieldRef<"Process", 'String'>
    readonly reason: FieldRef<"Process", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Process findUnique
   */
  export type ProcessFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Process
     */
    select?: ProcessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Process
     */
    omit?: ProcessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessInclude<ExtArgs> | null
    /**
     * Filter, which Process to fetch.
     */
    where: ProcessWhereUniqueInput
  }

  /**
   * Process findUniqueOrThrow
   */
  export type ProcessFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Process
     */
    select?: ProcessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Process
     */
    omit?: ProcessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessInclude<ExtArgs> | null
    /**
     * Filter, which Process to fetch.
     */
    where: ProcessWhereUniqueInput
  }

  /**
   * Process findFirst
   */
  export type ProcessFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Process
     */
    select?: ProcessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Process
     */
    omit?: ProcessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessInclude<ExtArgs> | null
    /**
     * Filter, which Process to fetch.
     */
    where?: ProcessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Processes to fetch.
     */
    orderBy?: ProcessOrderByWithRelationInput | ProcessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Processes.
     */
    cursor?: ProcessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Processes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Processes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Processes.
     */
    distinct?: ProcessScalarFieldEnum | ProcessScalarFieldEnum[]
  }

  /**
   * Process findFirstOrThrow
   */
  export type ProcessFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Process
     */
    select?: ProcessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Process
     */
    omit?: ProcessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessInclude<ExtArgs> | null
    /**
     * Filter, which Process to fetch.
     */
    where?: ProcessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Processes to fetch.
     */
    orderBy?: ProcessOrderByWithRelationInput | ProcessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Processes.
     */
    cursor?: ProcessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Processes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Processes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Processes.
     */
    distinct?: ProcessScalarFieldEnum | ProcessScalarFieldEnum[]
  }

  /**
   * Process findMany
   */
  export type ProcessFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Process
     */
    select?: ProcessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Process
     */
    omit?: ProcessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessInclude<ExtArgs> | null
    /**
     * Filter, which Processes to fetch.
     */
    where?: ProcessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Processes to fetch.
     */
    orderBy?: ProcessOrderByWithRelationInput | ProcessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Processes.
     */
    cursor?: ProcessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Processes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Processes.
     */
    skip?: number
    distinct?: ProcessScalarFieldEnum | ProcessScalarFieldEnum[]
  }

  /**
   * Process create
   */
  export type ProcessCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Process
     */
    select?: ProcessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Process
     */
    omit?: ProcessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessInclude<ExtArgs> | null
    /**
     * The data needed to create a Process.
     */
    data: XOR<ProcessCreateInput, ProcessUncheckedCreateInput>
  }

  /**
   * Process createMany
   */
  export type ProcessCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Processes.
     */
    data: ProcessCreateManyInput | ProcessCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Process createManyAndReturn
   */
  export type ProcessCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Process
     */
    select?: ProcessSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Process
     */
    omit?: ProcessOmit<ExtArgs> | null
    /**
     * The data used to create many Processes.
     */
    data: ProcessCreateManyInput | ProcessCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Process update
   */
  export type ProcessUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Process
     */
    select?: ProcessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Process
     */
    omit?: ProcessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessInclude<ExtArgs> | null
    /**
     * The data needed to update a Process.
     */
    data: XOR<ProcessUpdateInput, ProcessUncheckedUpdateInput>
    /**
     * Choose, which Process to update.
     */
    where: ProcessWhereUniqueInput
  }

  /**
   * Process updateMany
   */
  export type ProcessUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Processes.
     */
    data: XOR<ProcessUpdateManyMutationInput, ProcessUncheckedUpdateManyInput>
    /**
     * Filter which Processes to update
     */
    where?: ProcessWhereInput
    /**
     * Limit how many Processes to update.
     */
    limit?: number
  }

  /**
   * Process updateManyAndReturn
   */
  export type ProcessUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Process
     */
    select?: ProcessSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Process
     */
    omit?: ProcessOmit<ExtArgs> | null
    /**
     * The data used to update Processes.
     */
    data: XOR<ProcessUpdateManyMutationInput, ProcessUncheckedUpdateManyInput>
    /**
     * Filter which Processes to update
     */
    where?: ProcessWhereInput
    /**
     * Limit how many Processes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Process upsert
   */
  export type ProcessUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Process
     */
    select?: ProcessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Process
     */
    omit?: ProcessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessInclude<ExtArgs> | null
    /**
     * The filter to search for the Process to update in case it exists.
     */
    where: ProcessWhereUniqueInput
    /**
     * In case the Process found by the `where` argument doesn't exist, create a new Process with this data.
     */
    create: XOR<ProcessCreateInput, ProcessUncheckedCreateInput>
    /**
     * In case the Process was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProcessUpdateInput, ProcessUncheckedUpdateInput>
  }

  /**
   * Process delete
   */
  export type ProcessDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Process
     */
    select?: ProcessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Process
     */
    omit?: ProcessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessInclude<ExtArgs> | null
    /**
     * Filter which Process to delete.
     */
    where: ProcessWhereUniqueInput
  }

  /**
   * Process deleteMany
   */
  export type ProcessDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Processes to delete
     */
    where?: ProcessWhereInput
    /**
     * Limit how many Processes to delete.
     */
    limit?: number
  }

  /**
   * Process.versions
   */
  export type Process$versionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcessVersion
     */
    select?: ProcessVersionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProcessVersion
     */
    omit?: ProcessVersionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessVersionInclude<ExtArgs> | null
    where?: ProcessVersionWhereInput
    orderBy?: ProcessVersionOrderByWithRelationInput | ProcessVersionOrderByWithRelationInput[]
    cursor?: ProcessVersionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProcessVersionScalarFieldEnum | ProcessVersionScalarFieldEnum[]
  }

  /**
   * Process without action
   */
  export type ProcessDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Process
     */
    select?: ProcessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Process
     */
    omit?: ProcessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessInclude<ExtArgs> | null
  }


  /**
   * Model AuditLog
   */

  export type AggregateAuditLog = {
    _count: AuditLogCountAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  export type AuditLogMinAggregateOutputType = {
    id: string | null
    userId: string | null
    action: string | null
    entityType: string | null
    entityId: string | null
    reason: string | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date | null
  }

  export type AuditLogMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    action: string | null
    entityType: string | null
    entityId: string | null
    reason: string | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date | null
  }

  export type AuditLogCountAggregateOutputType = {
    id: number
    userId: number
    action: number
    entityType: number
    entityId: number
    details: number
    reason: number
    ipAddress: number
    userAgent: number
    createdAt: number
    _all: number
  }


  export type AuditLogMinAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    entityType?: true
    entityId?: true
    reason?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
  }

  export type AuditLogMaxAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    entityType?: true
    entityId?: true
    reason?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
  }

  export type AuditLogCountAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    entityType?: true
    entityId?: true
    details?: true
    reason?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
    _all?: true
  }

  export type AuditLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLog to aggregate.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AuditLogs
    **/
    _count?: true | AuditLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuditLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuditLogMaxAggregateInputType
  }

  export type GetAuditLogAggregateType<T extends AuditLogAggregateArgs> = {
        [P in keyof T & keyof AggregateAuditLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuditLog[P]>
      : GetScalarType<T[P], AggregateAuditLog[P]>
  }




  export type AuditLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithAggregationInput | AuditLogOrderByWithAggregationInput[]
    by: AuditLogScalarFieldEnum[] | AuditLogScalarFieldEnum
    having?: AuditLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuditLogCountAggregateInputType | true
    _min?: AuditLogMinAggregateInputType
    _max?: AuditLogMaxAggregateInputType
  }

  export type AuditLogGroupByOutputType = {
    id: string
    userId: string
    action: string
    entityType: string
    entityId: string
    details: JsonValue | null
    reason: string | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date
    _count: AuditLogCountAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  type GetAuditLogGroupByPayload<T extends AuditLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuditLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuditLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
            : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
        }
      >
    >


  export type AuditLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    entityType?: boolean
    entityId?: boolean
    details?: boolean
    reason?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    entityType?: boolean
    entityId?: boolean
    details?: boolean
    reason?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    entityType?: boolean
    entityId?: boolean
    details?: boolean
    reason?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectScalar = {
    id?: boolean
    userId?: boolean
    action?: boolean
    entityType?: boolean
    entityId?: boolean
    details?: boolean
    reason?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
  }

  export type AuditLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "action" | "entityType" | "entityId" | "details" | "reason" | "ipAddress" | "userAgent" | "createdAt", ExtArgs["result"]["auditLog"]>
  export type AuditLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AuditLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AuditLogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AuditLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AuditLog"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      action: string
      entityType: string
      entityId: string
      details: Prisma.JsonValue | null
      reason: string | null
      ipAddress: string | null
      userAgent: string | null
      createdAt: Date
    }, ExtArgs["result"]["auditLog"]>
    composites: {}
  }

  type AuditLogGetPayload<S extends boolean | null | undefined | AuditLogDefaultArgs> = $Result.GetResult<Prisma.$AuditLogPayload, S>

  type AuditLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AuditLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AuditLogCountAggregateInputType | true
    }

  export interface AuditLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AuditLog'], meta: { name: 'AuditLog' } }
    /**
     * Find zero or one AuditLog that matches the filter.
     * @param {AuditLogFindUniqueArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AuditLogFindUniqueArgs>(args: SelectSubset<T, AuditLogFindUniqueArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AuditLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AuditLogFindUniqueOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AuditLogFindUniqueOrThrowArgs>(args: SelectSubset<T, AuditLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AuditLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AuditLogFindFirstArgs>(args?: SelectSubset<T, AuditLogFindFirstArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AuditLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AuditLogFindFirstOrThrowArgs>(args?: SelectSubset<T, AuditLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AuditLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AuditLogs
     * const auditLogs = await prisma.auditLog.findMany()
     * 
     * // Get first 10 AuditLogs
     * const auditLogs = await prisma.auditLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AuditLogFindManyArgs>(args?: SelectSubset<T, AuditLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AuditLog.
     * @param {AuditLogCreateArgs} args - Arguments to create a AuditLog.
     * @example
     * // Create one AuditLog
     * const AuditLog = await prisma.auditLog.create({
     *   data: {
     *     // ... data to create a AuditLog
     *   }
     * })
     * 
     */
    create<T extends AuditLogCreateArgs>(args: SelectSubset<T, AuditLogCreateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AuditLogs.
     * @param {AuditLogCreateManyArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AuditLogCreateManyArgs>(args?: SelectSubset<T, AuditLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AuditLogs and returns the data saved in the database.
     * @param {AuditLogCreateManyAndReturnArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AuditLogs and only return the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AuditLogCreateManyAndReturnArgs>(args?: SelectSubset<T, AuditLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AuditLog.
     * @param {AuditLogDeleteArgs} args - Arguments to delete one AuditLog.
     * @example
     * // Delete one AuditLog
     * const AuditLog = await prisma.auditLog.delete({
     *   where: {
     *     // ... filter to delete one AuditLog
     *   }
     * })
     * 
     */
    delete<T extends AuditLogDeleteArgs>(args: SelectSubset<T, AuditLogDeleteArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AuditLog.
     * @param {AuditLogUpdateArgs} args - Arguments to update one AuditLog.
     * @example
     * // Update one AuditLog
     * const auditLog = await prisma.auditLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AuditLogUpdateArgs>(args: SelectSubset<T, AuditLogUpdateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AuditLogs.
     * @param {AuditLogDeleteManyArgs} args - Arguments to filter AuditLogs to delete.
     * @example
     * // Delete a few AuditLogs
     * const { count } = await prisma.auditLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AuditLogDeleteManyArgs>(args?: SelectSubset<T, AuditLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AuditLogs
     * const auditLog = await prisma.auditLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AuditLogUpdateManyArgs>(args: SelectSubset<T, AuditLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditLogs and returns the data updated in the database.
     * @param {AuditLogUpdateManyAndReturnArgs} args - Arguments to update many AuditLogs.
     * @example
     * // Update many AuditLogs
     * const auditLog = await prisma.auditLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AuditLogs and only return the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AuditLogUpdateManyAndReturnArgs>(args: SelectSubset<T, AuditLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AuditLog.
     * @param {AuditLogUpsertArgs} args - Arguments to update or create a AuditLog.
     * @example
     * // Update or create a AuditLog
     * const auditLog = await prisma.auditLog.upsert({
     *   create: {
     *     // ... data to create a AuditLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AuditLog we want to update
     *   }
     * })
     */
    upsert<T extends AuditLogUpsertArgs>(args: SelectSubset<T, AuditLogUpsertArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogCountArgs} args - Arguments to filter AuditLogs to count.
     * @example
     * // Count the number of AuditLogs
     * const count = await prisma.auditLog.count({
     *   where: {
     *     // ... the filter for the AuditLogs we want to count
     *   }
     * })
    **/
    count<T extends AuditLogCountArgs>(
      args?: Subset<T, AuditLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuditLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuditLogAggregateArgs>(args: Subset<T, AuditLogAggregateArgs>): Prisma.PrismaPromise<GetAuditLogAggregateType<T>>

    /**
     * Group by AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuditLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuditLogGroupByArgs['orderBy'] }
        : { orderBy?: AuditLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuditLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuditLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AuditLog model
   */
  readonly fields: AuditLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AuditLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuditLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AuditLog model
   */
  interface AuditLogFieldRefs {
    readonly id: FieldRef<"AuditLog", 'String'>
    readonly userId: FieldRef<"AuditLog", 'String'>
    readonly action: FieldRef<"AuditLog", 'String'>
    readonly entityType: FieldRef<"AuditLog", 'String'>
    readonly entityId: FieldRef<"AuditLog", 'String'>
    readonly details: FieldRef<"AuditLog", 'Json'>
    readonly reason: FieldRef<"AuditLog", 'String'>
    readonly ipAddress: FieldRef<"AuditLog", 'String'>
    readonly userAgent: FieldRef<"AuditLog", 'String'>
    readonly createdAt: FieldRef<"AuditLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AuditLog findUnique
   */
  export type AuditLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findUniqueOrThrow
   */
  export type AuditLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findFirst
   */
  export type AuditLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findFirstOrThrow
   */
  export type AuditLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findMany
   */
  export type AuditLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLogs to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog create
   */
  export type AuditLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to create a AuditLog.
     */
    data: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
  }

  /**
   * AuditLog createMany
   */
  export type AuditLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AuditLog createManyAndReturn
   */
  export type AuditLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AuditLog update
   */
  export type AuditLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to update a AuditLog.
     */
    data: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
    /**
     * Choose, which AuditLog to update.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog updateMany
   */
  export type AuditLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AuditLogs.
     */
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyInput>
    /**
     * Filter which AuditLogs to update
     */
    where?: AuditLogWhereInput
    /**
     * Limit how many AuditLogs to update.
     */
    limit?: number
  }

  /**
   * AuditLog updateManyAndReturn
   */
  export type AuditLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * The data used to update AuditLogs.
     */
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyInput>
    /**
     * Filter which AuditLogs to update
     */
    where?: AuditLogWhereInput
    /**
     * Limit how many AuditLogs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AuditLog upsert
   */
  export type AuditLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The filter to search for the AuditLog to update in case it exists.
     */
    where: AuditLogWhereUniqueInput
    /**
     * In case the AuditLog found by the `where` argument doesn't exist, create a new AuditLog with this data.
     */
    create: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
    /**
     * In case the AuditLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
  }

  /**
   * AuditLog delete
   */
  export type AuditLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter which AuditLog to delete.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog deleteMany
   */
  export type AuditLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLogs to delete
     */
    where?: AuditLogWhereInput
    /**
     * Limit how many AuditLogs to delete.
     */
    limit?: number
  }

  /**
   * AuditLog without action
   */
  export type AuditLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
  }


  /**
   * Model ProductionLineVersion
   */

  export type AggregateProductionLineVersion = {
    _count: ProductionLineVersionCountAggregateOutputType | null
    _avg: ProductionLineVersionAvgAggregateOutputType | null
    _sum: ProductionLineVersionSumAggregateOutputType | null
    _min: ProductionLineVersionMinAggregateOutputType | null
    _max: ProductionLineVersionMaxAggregateOutputType | null
  }

  export type ProductionLineVersionAvgAggregateOutputType = {
    version: number | null
  }

  export type ProductionLineVersionSumAggregateOutputType = {
    version: number | null
  }

  export type ProductionLineVersionMinAggregateOutputType = {
    id: string | null
    entityId: string | null
    version: number | null
    name: string | null
    status: $Enums.ProductionLineStatus | null
    createdAt: Date | null
    createdBy: string | null
    reason: string | null
  }

  export type ProductionLineVersionMaxAggregateOutputType = {
    id: string | null
    entityId: string | null
    version: number | null
    name: string | null
    status: $Enums.ProductionLineStatus | null
    createdAt: Date | null
    createdBy: string | null
    reason: string | null
  }

  export type ProductionLineVersionCountAggregateOutputType = {
    id: number
    entityId: number
    version: number
    name: number
    status: number
    createdAt: number
    createdBy: number
    reason: number
    _all: number
  }


  export type ProductionLineVersionAvgAggregateInputType = {
    version?: true
  }

  export type ProductionLineVersionSumAggregateInputType = {
    version?: true
  }

  export type ProductionLineVersionMinAggregateInputType = {
    id?: true
    entityId?: true
    version?: true
    name?: true
    status?: true
    createdAt?: true
    createdBy?: true
    reason?: true
  }

  export type ProductionLineVersionMaxAggregateInputType = {
    id?: true
    entityId?: true
    version?: true
    name?: true
    status?: true
    createdAt?: true
    createdBy?: true
    reason?: true
  }

  export type ProductionLineVersionCountAggregateInputType = {
    id?: true
    entityId?: true
    version?: true
    name?: true
    status?: true
    createdAt?: true
    createdBy?: true
    reason?: true
    _all?: true
  }

  export type ProductionLineVersionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductionLineVersion to aggregate.
     */
    where?: ProductionLineVersionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductionLineVersions to fetch.
     */
    orderBy?: ProductionLineVersionOrderByWithRelationInput | ProductionLineVersionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductionLineVersionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductionLineVersions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductionLineVersions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProductionLineVersions
    **/
    _count?: true | ProductionLineVersionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductionLineVersionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductionLineVersionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductionLineVersionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductionLineVersionMaxAggregateInputType
  }

  export type GetProductionLineVersionAggregateType<T extends ProductionLineVersionAggregateArgs> = {
        [P in keyof T & keyof AggregateProductionLineVersion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProductionLineVersion[P]>
      : GetScalarType<T[P], AggregateProductionLineVersion[P]>
  }




  export type ProductionLineVersionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductionLineVersionWhereInput
    orderBy?: ProductionLineVersionOrderByWithAggregationInput | ProductionLineVersionOrderByWithAggregationInput[]
    by: ProductionLineVersionScalarFieldEnum[] | ProductionLineVersionScalarFieldEnum
    having?: ProductionLineVersionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductionLineVersionCountAggregateInputType | true
    _avg?: ProductionLineVersionAvgAggregateInputType
    _sum?: ProductionLineVersionSumAggregateInputType
    _min?: ProductionLineVersionMinAggregateInputType
    _max?: ProductionLineVersionMaxAggregateInputType
  }

  export type ProductionLineVersionGroupByOutputType = {
    id: string
    entityId: string
    version: number
    name: string
    status: $Enums.ProductionLineStatus
    createdAt: Date
    createdBy: string
    reason: string
    _count: ProductionLineVersionCountAggregateOutputType | null
    _avg: ProductionLineVersionAvgAggregateOutputType | null
    _sum: ProductionLineVersionSumAggregateOutputType | null
    _min: ProductionLineVersionMinAggregateOutputType | null
    _max: ProductionLineVersionMaxAggregateOutputType | null
  }

  type GetProductionLineVersionGroupByPayload<T extends ProductionLineVersionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductionLineVersionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductionLineVersionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductionLineVersionGroupByOutputType[P]>
            : GetScalarType<T[P], ProductionLineVersionGroupByOutputType[P]>
        }
      >
    >


  export type ProductionLineVersionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    entityId?: boolean
    version?: boolean
    name?: boolean
    status?: boolean
    createdAt?: boolean
    createdBy?: boolean
    reason?: boolean
    creator?: boolean | UserDefaultArgs<ExtArgs>
    entity?: boolean | ProductionLineDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productionLineVersion"]>

  export type ProductionLineVersionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    entityId?: boolean
    version?: boolean
    name?: boolean
    status?: boolean
    createdAt?: boolean
    createdBy?: boolean
    reason?: boolean
    creator?: boolean | UserDefaultArgs<ExtArgs>
    entity?: boolean | ProductionLineDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productionLineVersion"]>

  export type ProductionLineVersionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    entityId?: boolean
    version?: boolean
    name?: boolean
    status?: boolean
    createdAt?: boolean
    createdBy?: boolean
    reason?: boolean
    creator?: boolean | UserDefaultArgs<ExtArgs>
    entity?: boolean | ProductionLineDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productionLineVersion"]>

  export type ProductionLineVersionSelectScalar = {
    id?: boolean
    entityId?: boolean
    version?: boolean
    name?: boolean
    status?: boolean
    createdAt?: boolean
    createdBy?: boolean
    reason?: boolean
  }

  export type ProductionLineVersionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "entityId" | "version" | "name" | "status" | "createdAt" | "createdBy" | "reason", ExtArgs["result"]["productionLineVersion"]>
  export type ProductionLineVersionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | UserDefaultArgs<ExtArgs>
    entity?: boolean | ProductionLineDefaultArgs<ExtArgs>
  }
  export type ProductionLineVersionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | UserDefaultArgs<ExtArgs>
    entity?: boolean | ProductionLineDefaultArgs<ExtArgs>
  }
  export type ProductionLineVersionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | UserDefaultArgs<ExtArgs>
    entity?: boolean | ProductionLineDefaultArgs<ExtArgs>
  }

  export type $ProductionLineVersionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProductionLineVersion"
    objects: {
      creator: Prisma.$UserPayload<ExtArgs>
      entity: Prisma.$ProductionLinePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      entityId: string
      version: number
      name: string
      status: $Enums.ProductionLineStatus
      createdAt: Date
      createdBy: string
      reason: string
    }, ExtArgs["result"]["productionLineVersion"]>
    composites: {}
  }

  type ProductionLineVersionGetPayload<S extends boolean | null | undefined | ProductionLineVersionDefaultArgs> = $Result.GetResult<Prisma.$ProductionLineVersionPayload, S>

  type ProductionLineVersionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProductionLineVersionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProductionLineVersionCountAggregateInputType | true
    }

  export interface ProductionLineVersionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProductionLineVersion'], meta: { name: 'ProductionLineVersion' } }
    /**
     * Find zero or one ProductionLineVersion that matches the filter.
     * @param {ProductionLineVersionFindUniqueArgs} args - Arguments to find a ProductionLineVersion
     * @example
     * // Get one ProductionLineVersion
     * const productionLineVersion = await prisma.productionLineVersion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductionLineVersionFindUniqueArgs>(args: SelectSubset<T, ProductionLineVersionFindUniqueArgs<ExtArgs>>): Prisma__ProductionLineVersionClient<$Result.GetResult<Prisma.$ProductionLineVersionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ProductionLineVersion that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProductionLineVersionFindUniqueOrThrowArgs} args - Arguments to find a ProductionLineVersion
     * @example
     * // Get one ProductionLineVersion
     * const productionLineVersion = await prisma.productionLineVersion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductionLineVersionFindUniqueOrThrowArgs>(args: SelectSubset<T, ProductionLineVersionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProductionLineVersionClient<$Result.GetResult<Prisma.$ProductionLineVersionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProductionLineVersion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductionLineVersionFindFirstArgs} args - Arguments to find a ProductionLineVersion
     * @example
     * // Get one ProductionLineVersion
     * const productionLineVersion = await prisma.productionLineVersion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductionLineVersionFindFirstArgs>(args?: SelectSubset<T, ProductionLineVersionFindFirstArgs<ExtArgs>>): Prisma__ProductionLineVersionClient<$Result.GetResult<Prisma.$ProductionLineVersionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProductionLineVersion that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductionLineVersionFindFirstOrThrowArgs} args - Arguments to find a ProductionLineVersion
     * @example
     * // Get one ProductionLineVersion
     * const productionLineVersion = await prisma.productionLineVersion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductionLineVersionFindFirstOrThrowArgs>(args?: SelectSubset<T, ProductionLineVersionFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProductionLineVersionClient<$Result.GetResult<Prisma.$ProductionLineVersionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProductionLineVersions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductionLineVersionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProductionLineVersions
     * const productionLineVersions = await prisma.productionLineVersion.findMany()
     * 
     * // Get first 10 ProductionLineVersions
     * const productionLineVersions = await prisma.productionLineVersion.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productionLineVersionWithIdOnly = await prisma.productionLineVersion.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProductionLineVersionFindManyArgs>(args?: SelectSubset<T, ProductionLineVersionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductionLineVersionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ProductionLineVersion.
     * @param {ProductionLineVersionCreateArgs} args - Arguments to create a ProductionLineVersion.
     * @example
     * // Create one ProductionLineVersion
     * const ProductionLineVersion = await prisma.productionLineVersion.create({
     *   data: {
     *     // ... data to create a ProductionLineVersion
     *   }
     * })
     * 
     */
    create<T extends ProductionLineVersionCreateArgs>(args: SelectSubset<T, ProductionLineVersionCreateArgs<ExtArgs>>): Prisma__ProductionLineVersionClient<$Result.GetResult<Prisma.$ProductionLineVersionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ProductionLineVersions.
     * @param {ProductionLineVersionCreateManyArgs} args - Arguments to create many ProductionLineVersions.
     * @example
     * // Create many ProductionLineVersions
     * const productionLineVersion = await prisma.productionLineVersion.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProductionLineVersionCreateManyArgs>(args?: SelectSubset<T, ProductionLineVersionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProductionLineVersions and returns the data saved in the database.
     * @param {ProductionLineVersionCreateManyAndReturnArgs} args - Arguments to create many ProductionLineVersions.
     * @example
     * // Create many ProductionLineVersions
     * const productionLineVersion = await prisma.productionLineVersion.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProductionLineVersions and only return the `id`
     * const productionLineVersionWithIdOnly = await prisma.productionLineVersion.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProductionLineVersionCreateManyAndReturnArgs>(args?: SelectSubset<T, ProductionLineVersionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductionLineVersionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ProductionLineVersion.
     * @param {ProductionLineVersionDeleteArgs} args - Arguments to delete one ProductionLineVersion.
     * @example
     * // Delete one ProductionLineVersion
     * const ProductionLineVersion = await prisma.productionLineVersion.delete({
     *   where: {
     *     // ... filter to delete one ProductionLineVersion
     *   }
     * })
     * 
     */
    delete<T extends ProductionLineVersionDeleteArgs>(args: SelectSubset<T, ProductionLineVersionDeleteArgs<ExtArgs>>): Prisma__ProductionLineVersionClient<$Result.GetResult<Prisma.$ProductionLineVersionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ProductionLineVersion.
     * @param {ProductionLineVersionUpdateArgs} args - Arguments to update one ProductionLineVersion.
     * @example
     * // Update one ProductionLineVersion
     * const productionLineVersion = await prisma.productionLineVersion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProductionLineVersionUpdateArgs>(args: SelectSubset<T, ProductionLineVersionUpdateArgs<ExtArgs>>): Prisma__ProductionLineVersionClient<$Result.GetResult<Prisma.$ProductionLineVersionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ProductionLineVersions.
     * @param {ProductionLineVersionDeleteManyArgs} args - Arguments to filter ProductionLineVersions to delete.
     * @example
     * // Delete a few ProductionLineVersions
     * const { count } = await prisma.productionLineVersion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProductionLineVersionDeleteManyArgs>(args?: SelectSubset<T, ProductionLineVersionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductionLineVersions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductionLineVersionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProductionLineVersions
     * const productionLineVersion = await prisma.productionLineVersion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProductionLineVersionUpdateManyArgs>(args: SelectSubset<T, ProductionLineVersionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductionLineVersions and returns the data updated in the database.
     * @param {ProductionLineVersionUpdateManyAndReturnArgs} args - Arguments to update many ProductionLineVersions.
     * @example
     * // Update many ProductionLineVersions
     * const productionLineVersion = await prisma.productionLineVersion.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ProductionLineVersions and only return the `id`
     * const productionLineVersionWithIdOnly = await prisma.productionLineVersion.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProductionLineVersionUpdateManyAndReturnArgs>(args: SelectSubset<T, ProductionLineVersionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductionLineVersionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ProductionLineVersion.
     * @param {ProductionLineVersionUpsertArgs} args - Arguments to update or create a ProductionLineVersion.
     * @example
     * // Update or create a ProductionLineVersion
     * const productionLineVersion = await prisma.productionLineVersion.upsert({
     *   create: {
     *     // ... data to create a ProductionLineVersion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProductionLineVersion we want to update
     *   }
     * })
     */
    upsert<T extends ProductionLineVersionUpsertArgs>(args: SelectSubset<T, ProductionLineVersionUpsertArgs<ExtArgs>>): Prisma__ProductionLineVersionClient<$Result.GetResult<Prisma.$ProductionLineVersionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ProductionLineVersions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductionLineVersionCountArgs} args - Arguments to filter ProductionLineVersions to count.
     * @example
     * // Count the number of ProductionLineVersions
     * const count = await prisma.productionLineVersion.count({
     *   where: {
     *     // ... the filter for the ProductionLineVersions we want to count
     *   }
     * })
    **/
    count<T extends ProductionLineVersionCountArgs>(
      args?: Subset<T, ProductionLineVersionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductionLineVersionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProductionLineVersion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductionLineVersionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductionLineVersionAggregateArgs>(args: Subset<T, ProductionLineVersionAggregateArgs>): Prisma.PrismaPromise<GetProductionLineVersionAggregateType<T>>

    /**
     * Group by ProductionLineVersion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductionLineVersionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductionLineVersionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductionLineVersionGroupByArgs['orderBy'] }
        : { orderBy?: ProductionLineVersionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductionLineVersionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductionLineVersionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProductionLineVersion model
   */
  readonly fields: ProductionLineVersionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProductionLineVersion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductionLineVersionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    creator<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    entity<T extends ProductionLineDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductionLineDefaultArgs<ExtArgs>>): Prisma__ProductionLineClient<$Result.GetResult<Prisma.$ProductionLinePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProductionLineVersion model
   */
  interface ProductionLineVersionFieldRefs {
    readonly id: FieldRef<"ProductionLineVersion", 'String'>
    readonly entityId: FieldRef<"ProductionLineVersion", 'String'>
    readonly version: FieldRef<"ProductionLineVersion", 'Int'>
    readonly name: FieldRef<"ProductionLineVersion", 'String'>
    readonly status: FieldRef<"ProductionLineVersion", 'ProductionLineStatus'>
    readonly createdAt: FieldRef<"ProductionLineVersion", 'DateTime'>
    readonly createdBy: FieldRef<"ProductionLineVersion", 'String'>
    readonly reason: FieldRef<"ProductionLineVersion", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ProductionLineVersion findUnique
   */
  export type ProductionLineVersionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductionLineVersion
     */
    select?: ProductionLineVersionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductionLineVersion
     */
    omit?: ProductionLineVersionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductionLineVersionInclude<ExtArgs> | null
    /**
     * Filter, which ProductionLineVersion to fetch.
     */
    where: ProductionLineVersionWhereUniqueInput
  }

  /**
   * ProductionLineVersion findUniqueOrThrow
   */
  export type ProductionLineVersionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductionLineVersion
     */
    select?: ProductionLineVersionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductionLineVersion
     */
    omit?: ProductionLineVersionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductionLineVersionInclude<ExtArgs> | null
    /**
     * Filter, which ProductionLineVersion to fetch.
     */
    where: ProductionLineVersionWhereUniqueInput
  }

  /**
   * ProductionLineVersion findFirst
   */
  export type ProductionLineVersionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductionLineVersion
     */
    select?: ProductionLineVersionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductionLineVersion
     */
    omit?: ProductionLineVersionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductionLineVersionInclude<ExtArgs> | null
    /**
     * Filter, which ProductionLineVersion to fetch.
     */
    where?: ProductionLineVersionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductionLineVersions to fetch.
     */
    orderBy?: ProductionLineVersionOrderByWithRelationInput | ProductionLineVersionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductionLineVersions.
     */
    cursor?: ProductionLineVersionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductionLineVersions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductionLineVersions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductionLineVersions.
     */
    distinct?: ProductionLineVersionScalarFieldEnum | ProductionLineVersionScalarFieldEnum[]
  }

  /**
   * ProductionLineVersion findFirstOrThrow
   */
  export type ProductionLineVersionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductionLineVersion
     */
    select?: ProductionLineVersionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductionLineVersion
     */
    omit?: ProductionLineVersionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductionLineVersionInclude<ExtArgs> | null
    /**
     * Filter, which ProductionLineVersion to fetch.
     */
    where?: ProductionLineVersionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductionLineVersions to fetch.
     */
    orderBy?: ProductionLineVersionOrderByWithRelationInput | ProductionLineVersionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductionLineVersions.
     */
    cursor?: ProductionLineVersionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductionLineVersions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductionLineVersions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductionLineVersions.
     */
    distinct?: ProductionLineVersionScalarFieldEnum | ProductionLineVersionScalarFieldEnum[]
  }

  /**
   * ProductionLineVersion findMany
   */
  export type ProductionLineVersionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductionLineVersion
     */
    select?: ProductionLineVersionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductionLineVersion
     */
    omit?: ProductionLineVersionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductionLineVersionInclude<ExtArgs> | null
    /**
     * Filter, which ProductionLineVersions to fetch.
     */
    where?: ProductionLineVersionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductionLineVersions to fetch.
     */
    orderBy?: ProductionLineVersionOrderByWithRelationInput | ProductionLineVersionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProductionLineVersions.
     */
    cursor?: ProductionLineVersionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductionLineVersions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductionLineVersions.
     */
    skip?: number
    distinct?: ProductionLineVersionScalarFieldEnum | ProductionLineVersionScalarFieldEnum[]
  }

  /**
   * ProductionLineVersion create
   */
  export type ProductionLineVersionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductionLineVersion
     */
    select?: ProductionLineVersionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductionLineVersion
     */
    omit?: ProductionLineVersionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductionLineVersionInclude<ExtArgs> | null
    /**
     * The data needed to create a ProductionLineVersion.
     */
    data: XOR<ProductionLineVersionCreateInput, ProductionLineVersionUncheckedCreateInput>
  }

  /**
   * ProductionLineVersion createMany
   */
  export type ProductionLineVersionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProductionLineVersions.
     */
    data: ProductionLineVersionCreateManyInput | ProductionLineVersionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProductionLineVersion createManyAndReturn
   */
  export type ProductionLineVersionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductionLineVersion
     */
    select?: ProductionLineVersionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProductionLineVersion
     */
    omit?: ProductionLineVersionOmit<ExtArgs> | null
    /**
     * The data used to create many ProductionLineVersions.
     */
    data: ProductionLineVersionCreateManyInput | ProductionLineVersionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductionLineVersionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProductionLineVersion update
   */
  export type ProductionLineVersionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductionLineVersion
     */
    select?: ProductionLineVersionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductionLineVersion
     */
    omit?: ProductionLineVersionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductionLineVersionInclude<ExtArgs> | null
    /**
     * The data needed to update a ProductionLineVersion.
     */
    data: XOR<ProductionLineVersionUpdateInput, ProductionLineVersionUncheckedUpdateInput>
    /**
     * Choose, which ProductionLineVersion to update.
     */
    where: ProductionLineVersionWhereUniqueInput
  }

  /**
   * ProductionLineVersion updateMany
   */
  export type ProductionLineVersionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProductionLineVersions.
     */
    data: XOR<ProductionLineVersionUpdateManyMutationInput, ProductionLineVersionUncheckedUpdateManyInput>
    /**
     * Filter which ProductionLineVersions to update
     */
    where?: ProductionLineVersionWhereInput
    /**
     * Limit how many ProductionLineVersions to update.
     */
    limit?: number
  }

  /**
   * ProductionLineVersion updateManyAndReturn
   */
  export type ProductionLineVersionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductionLineVersion
     */
    select?: ProductionLineVersionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProductionLineVersion
     */
    omit?: ProductionLineVersionOmit<ExtArgs> | null
    /**
     * The data used to update ProductionLineVersions.
     */
    data: XOR<ProductionLineVersionUpdateManyMutationInput, ProductionLineVersionUncheckedUpdateManyInput>
    /**
     * Filter which ProductionLineVersions to update
     */
    where?: ProductionLineVersionWhereInput
    /**
     * Limit how many ProductionLineVersions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductionLineVersionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProductionLineVersion upsert
   */
  export type ProductionLineVersionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductionLineVersion
     */
    select?: ProductionLineVersionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductionLineVersion
     */
    omit?: ProductionLineVersionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductionLineVersionInclude<ExtArgs> | null
    /**
     * The filter to search for the ProductionLineVersion to update in case it exists.
     */
    where: ProductionLineVersionWhereUniqueInput
    /**
     * In case the ProductionLineVersion found by the `where` argument doesn't exist, create a new ProductionLineVersion with this data.
     */
    create: XOR<ProductionLineVersionCreateInput, ProductionLineVersionUncheckedCreateInput>
    /**
     * In case the ProductionLineVersion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductionLineVersionUpdateInput, ProductionLineVersionUncheckedUpdateInput>
  }

  /**
   * ProductionLineVersion delete
   */
  export type ProductionLineVersionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductionLineVersion
     */
    select?: ProductionLineVersionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductionLineVersion
     */
    omit?: ProductionLineVersionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductionLineVersionInclude<ExtArgs> | null
    /**
     * Filter which ProductionLineVersion to delete.
     */
    where: ProductionLineVersionWhereUniqueInput
  }

  /**
   * ProductionLineVersion deleteMany
   */
  export type ProductionLineVersionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductionLineVersions to delete
     */
    where?: ProductionLineVersionWhereInput
    /**
     * Limit how many ProductionLineVersions to delete.
     */
    limit?: number
  }

  /**
   * ProductionLineVersion without action
   */
  export type ProductionLineVersionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductionLineVersion
     */
    select?: ProductionLineVersionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductionLineVersion
     */
    omit?: ProductionLineVersionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductionLineVersionInclude<ExtArgs> | null
  }


  /**
   * Model ProcessVersion
   */

  export type AggregateProcessVersion = {
    _count: ProcessVersionCountAggregateOutputType | null
    _avg: ProcessVersionAvgAggregateOutputType | null
    _sum: ProcessVersionSumAggregateOutputType | null
    _min: ProcessVersionMinAggregateOutputType | null
    _max: ProcessVersionMaxAggregateOutputType | null
  }

  export type ProcessVersionAvgAggregateOutputType = {
    version: number | null
    duration: number | null
    progress: number | null
    x: number | null
    y: number | null
  }

  export type ProcessVersionSumAggregateOutputType = {
    version: number | null
    duration: number | null
    progress: number | null
    x: number | null
    y: number | null
  }

  export type ProcessVersionMinAggregateOutputType = {
    id: string | null
    entityId: string | null
    version: number | null
    title: string | null
    description: string | null
    duration: number | null
    progress: number | null
    status: $Enums.ProcessStatus | null
    x: number | null
    y: number | null
    color: string | null
    productionLineId: string | null
    createdAt: Date | null
    createdBy: string | null
    reason: string | null
  }

  export type ProcessVersionMaxAggregateOutputType = {
    id: string | null
    entityId: string | null
    version: number | null
    title: string | null
    description: string | null
    duration: number | null
    progress: number | null
    status: $Enums.ProcessStatus | null
    x: number | null
    y: number | null
    color: string | null
    productionLineId: string | null
    createdAt: Date | null
    createdBy: string | null
    reason: string | null
  }

  export type ProcessVersionCountAggregateOutputType = {
    id: number
    entityId: number
    version: number
    title: number
    description: number
    duration: number
    progress: number
    status: number
    x: number
    y: number
    color: number
    productionLineId: number
    createdAt: number
    createdBy: number
    reason: number
    _all: number
  }


  export type ProcessVersionAvgAggregateInputType = {
    version?: true
    duration?: true
    progress?: true
    x?: true
    y?: true
  }

  export type ProcessVersionSumAggregateInputType = {
    version?: true
    duration?: true
    progress?: true
    x?: true
    y?: true
  }

  export type ProcessVersionMinAggregateInputType = {
    id?: true
    entityId?: true
    version?: true
    title?: true
    description?: true
    duration?: true
    progress?: true
    status?: true
    x?: true
    y?: true
    color?: true
    productionLineId?: true
    createdAt?: true
    createdBy?: true
    reason?: true
  }

  export type ProcessVersionMaxAggregateInputType = {
    id?: true
    entityId?: true
    version?: true
    title?: true
    description?: true
    duration?: true
    progress?: true
    status?: true
    x?: true
    y?: true
    color?: true
    productionLineId?: true
    createdAt?: true
    createdBy?: true
    reason?: true
  }

  export type ProcessVersionCountAggregateInputType = {
    id?: true
    entityId?: true
    version?: true
    title?: true
    description?: true
    duration?: true
    progress?: true
    status?: true
    x?: true
    y?: true
    color?: true
    productionLineId?: true
    createdAt?: true
    createdBy?: true
    reason?: true
    _all?: true
  }

  export type ProcessVersionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProcessVersion to aggregate.
     */
    where?: ProcessVersionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProcessVersions to fetch.
     */
    orderBy?: ProcessVersionOrderByWithRelationInput | ProcessVersionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProcessVersionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProcessVersions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProcessVersions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProcessVersions
    **/
    _count?: true | ProcessVersionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProcessVersionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProcessVersionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProcessVersionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProcessVersionMaxAggregateInputType
  }

  export type GetProcessVersionAggregateType<T extends ProcessVersionAggregateArgs> = {
        [P in keyof T & keyof AggregateProcessVersion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProcessVersion[P]>
      : GetScalarType<T[P], AggregateProcessVersion[P]>
  }




  export type ProcessVersionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProcessVersionWhereInput
    orderBy?: ProcessVersionOrderByWithAggregationInput | ProcessVersionOrderByWithAggregationInput[]
    by: ProcessVersionScalarFieldEnum[] | ProcessVersionScalarFieldEnum
    having?: ProcessVersionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProcessVersionCountAggregateInputType | true
    _avg?: ProcessVersionAvgAggregateInputType
    _sum?: ProcessVersionSumAggregateInputType
    _min?: ProcessVersionMinAggregateInputType
    _max?: ProcessVersionMaxAggregateInputType
  }

  export type ProcessVersionGroupByOutputType = {
    id: string
    entityId: string
    version: number
    title: string
    description: string | null
    duration: number | null
    progress: number
    status: $Enums.ProcessStatus
    x: number
    y: number
    color: string
    productionLineId: string
    createdAt: Date
    createdBy: string
    reason: string
    _count: ProcessVersionCountAggregateOutputType | null
    _avg: ProcessVersionAvgAggregateOutputType | null
    _sum: ProcessVersionSumAggregateOutputType | null
    _min: ProcessVersionMinAggregateOutputType | null
    _max: ProcessVersionMaxAggregateOutputType | null
  }

  type GetProcessVersionGroupByPayload<T extends ProcessVersionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProcessVersionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProcessVersionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProcessVersionGroupByOutputType[P]>
            : GetScalarType<T[P], ProcessVersionGroupByOutputType[P]>
        }
      >
    >


  export type ProcessVersionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    entityId?: boolean
    version?: boolean
    title?: boolean
    description?: boolean
    duration?: boolean
    progress?: boolean
    status?: boolean
    x?: boolean
    y?: boolean
    color?: boolean
    productionLineId?: boolean
    createdAt?: boolean
    createdBy?: boolean
    reason?: boolean
    creator?: boolean | UserDefaultArgs<ExtArgs>
    entity?: boolean | ProcessDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["processVersion"]>

  export type ProcessVersionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    entityId?: boolean
    version?: boolean
    title?: boolean
    description?: boolean
    duration?: boolean
    progress?: boolean
    status?: boolean
    x?: boolean
    y?: boolean
    color?: boolean
    productionLineId?: boolean
    createdAt?: boolean
    createdBy?: boolean
    reason?: boolean
    creator?: boolean | UserDefaultArgs<ExtArgs>
    entity?: boolean | ProcessDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["processVersion"]>

  export type ProcessVersionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    entityId?: boolean
    version?: boolean
    title?: boolean
    description?: boolean
    duration?: boolean
    progress?: boolean
    status?: boolean
    x?: boolean
    y?: boolean
    color?: boolean
    productionLineId?: boolean
    createdAt?: boolean
    createdBy?: boolean
    reason?: boolean
    creator?: boolean | UserDefaultArgs<ExtArgs>
    entity?: boolean | ProcessDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["processVersion"]>

  export type ProcessVersionSelectScalar = {
    id?: boolean
    entityId?: boolean
    version?: boolean
    title?: boolean
    description?: boolean
    duration?: boolean
    progress?: boolean
    status?: boolean
    x?: boolean
    y?: boolean
    color?: boolean
    productionLineId?: boolean
    createdAt?: boolean
    createdBy?: boolean
    reason?: boolean
  }

  export type ProcessVersionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "entityId" | "version" | "title" | "description" | "duration" | "progress" | "status" | "x" | "y" | "color" | "productionLineId" | "createdAt" | "createdBy" | "reason", ExtArgs["result"]["processVersion"]>
  export type ProcessVersionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | UserDefaultArgs<ExtArgs>
    entity?: boolean | ProcessDefaultArgs<ExtArgs>
  }
  export type ProcessVersionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | UserDefaultArgs<ExtArgs>
    entity?: boolean | ProcessDefaultArgs<ExtArgs>
  }
  export type ProcessVersionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | UserDefaultArgs<ExtArgs>
    entity?: boolean | ProcessDefaultArgs<ExtArgs>
  }

  export type $ProcessVersionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProcessVersion"
    objects: {
      creator: Prisma.$UserPayload<ExtArgs>
      entity: Prisma.$ProcessPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      entityId: string
      version: number
      title: string
      description: string | null
      duration: number | null
      progress: number
      status: $Enums.ProcessStatus
      x: number
      y: number
      color: string
      productionLineId: string
      createdAt: Date
      createdBy: string
      reason: string
    }, ExtArgs["result"]["processVersion"]>
    composites: {}
  }

  type ProcessVersionGetPayload<S extends boolean | null | undefined | ProcessVersionDefaultArgs> = $Result.GetResult<Prisma.$ProcessVersionPayload, S>

  type ProcessVersionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProcessVersionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProcessVersionCountAggregateInputType | true
    }

  export interface ProcessVersionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProcessVersion'], meta: { name: 'ProcessVersion' } }
    /**
     * Find zero or one ProcessVersion that matches the filter.
     * @param {ProcessVersionFindUniqueArgs} args - Arguments to find a ProcessVersion
     * @example
     * // Get one ProcessVersion
     * const processVersion = await prisma.processVersion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProcessVersionFindUniqueArgs>(args: SelectSubset<T, ProcessVersionFindUniqueArgs<ExtArgs>>): Prisma__ProcessVersionClient<$Result.GetResult<Prisma.$ProcessVersionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ProcessVersion that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProcessVersionFindUniqueOrThrowArgs} args - Arguments to find a ProcessVersion
     * @example
     * // Get one ProcessVersion
     * const processVersion = await prisma.processVersion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProcessVersionFindUniqueOrThrowArgs>(args: SelectSubset<T, ProcessVersionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProcessVersionClient<$Result.GetResult<Prisma.$ProcessVersionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProcessVersion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcessVersionFindFirstArgs} args - Arguments to find a ProcessVersion
     * @example
     * // Get one ProcessVersion
     * const processVersion = await prisma.processVersion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProcessVersionFindFirstArgs>(args?: SelectSubset<T, ProcessVersionFindFirstArgs<ExtArgs>>): Prisma__ProcessVersionClient<$Result.GetResult<Prisma.$ProcessVersionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProcessVersion that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcessVersionFindFirstOrThrowArgs} args - Arguments to find a ProcessVersion
     * @example
     * // Get one ProcessVersion
     * const processVersion = await prisma.processVersion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProcessVersionFindFirstOrThrowArgs>(args?: SelectSubset<T, ProcessVersionFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProcessVersionClient<$Result.GetResult<Prisma.$ProcessVersionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProcessVersions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcessVersionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProcessVersions
     * const processVersions = await prisma.processVersion.findMany()
     * 
     * // Get first 10 ProcessVersions
     * const processVersions = await prisma.processVersion.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const processVersionWithIdOnly = await prisma.processVersion.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProcessVersionFindManyArgs>(args?: SelectSubset<T, ProcessVersionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProcessVersionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ProcessVersion.
     * @param {ProcessVersionCreateArgs} args - Arguments to create a ProcessVersion.
     * @example
     * // Create one ProcessVersion
     * const ProcessVersion = await prisma.processVersion.create({
     *   data: {
     *     // ... data to create a ProcessVersion
     *   }
     * })
     * 
     */
    create<T extends ProcessVersionCreateArgs>(args: SelectSubset<T, ProcessVersionCreateArgs<ExtArgs>>): Prisma__ProcessVersionClient<$Result.GetResult<Prisma.$ProcessVersionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ProcessVersions.
     * @param {ProcessVersionCreateManyArgs} args - Arguments to create many ProcessVersions.
     * @example
     * // Create many ProcessVersions
     * const processVersion = await prisma.processVersion.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProcessVersionCreateManyArgs>(args?: SelectSubset<T, ProcessVersionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProcessVersions and returns the data saved in the database.
     * @param {ProcessVersionCreateManyAndReturnArgs} args - Arguments to create many ProcessVersions.
     * @example
     * // Create many ProcessVersions
     * const processVersion = await prisma.processVersion.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProcessVersions and only return the `id`
     * const processVersionWithIdOnly = await prisma.processVersion.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProcessVersionCreateManyAndReturnArgs>(args?: SelectSubset<T, ProcessVersionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProcessVersionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ProcessVersion.
     * @param {ProcessVersionDeleteArgs} args - Arguments to delete one ProcessVersion.
     * @example
     * // Delete one ProcessVersion
     * const ProcessVersion = await prisma.processVersion.delete({
     *   where: {
     *     // ... filter to delete one ProcessVersion
     *   }
     * })
     * 
     */
    delete<T extends ProcessVersionDeleteArgs>(args: SelectSubset<T, ProcessVersionDeleteArgs<ExtArgs>>): Prisma__ProcessVersionClient<$Result.GetResult<Prisma.$ProcessVersionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ProcessVersion.
     * @param {ProcessVersionUpdateArgs} args - Arguments to update one ProcessVersion.
     * @example
     * // Update one ProcessVersion
     * const processVersion = await prisma.processVersion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProcessVersionUpdateArgs>(args: SelectSubset<T, ProcessVersionUpdateArgs<ExtArgs>>): Prisma__ProcessVersionClient<$Result.GetResult<Prisma.$ProcessVersionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ProcessVersions.
     * @param {ProcessVersionDeleteManyArgs} args - Arguments to filter ProcessVersions to delete.
     * @example
     * // Delete a few ProcessVersions
     * const { count } = await prisma.processVersion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProcessVersionDeleteManyArgs>(args?: SelectSubset<T, ProcessVersionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProcessVersions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcessVersionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProcessVersions
     * const processVersion = await prisma.processVersion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProcessVersionUpdateManyArgs>(args: SelectSubset<T, ProcessVersionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProcessVersions and returns the data updated in the database.
     * @param {ProcessVersionUpdateManyAndReturnArgs} args - Arguments to update many ProcessVersions.
     * @example
     * // Update many ProcessVersions
     * const processVersion = await prisma.processVersion.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ProcessVersions and only return the `id`
     * const processVersionWithIdOnly = await prisma.processVersion.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProcessVersionUpdateManyAndReturnArgs>(args: SelectSubset<T, ProcessVersionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProcessVersionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ProcessVersion.
     * @param {ProcessVersionUpsertArgs} args - Arguments to update or create a ProcessVersion.
     * @example
     * // Update or create a ProcessVersion
     * const processVersion = await prisma.processVersion.upsert({
     *   create: {
     *     // ... data to create a ProcessVersion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProcessVersion we want to update
     *   }
     * })
     */
    upsert<T extends ProcessVersionUpsertArgs>(args: SelectSubset<T, ProcessVersionUpsertArgs<ExtArgs>>): Prisma__ProcessVersionClient<$Result.GetResult<Prisma.$ProcessVersionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ProcessVersions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcessVersionCountArgs} args - Arguments to filter ProcessVersions to count.
     * @example
     * // Count the number of ProcessVersions
     * const count = await prisma.processVersion.count({
     *   where: {
     *     // ... the filter for the ProcessVersions we want to count
     *   }
     * })
    **/
    count<T extends ProcessVersionCountArgs>(
      args?: Subset<T, ProcessVersionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProcessVersionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProcessVersion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcessVersionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProcessVersionAggregateArgs>(args: Subset<T, ProcessVersionAggregateArgs>): Prisma.PrismaPromise<GetProcessVersionAggregateType<T>>

    /**
     * Group by ProcessVersion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcessVersionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProcessVersionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProcessVersionGroupByArgs['orderBy'] }
        : { orderBy?: ProcessVersionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProcessVersionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProcessVersionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProcessVersion model
   */
  readonly fields: ProcessVersionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProcessVersion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProcessVersionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    creator<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    entity<T extends ProcessDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProcessDefaultArgs<ExtArgs>>): Prisma__ProcessClient<$Result.GetResult<Prisma.$ProcessPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProcessVersion model
   */
  interface ProcessVersionFieldRefs {
    readonly id: FieldRef<"ProcessVersion", 'String'>
    readonly entityId: FieldRef<"ProcessVersion", 'String'>
    readonly version: FieldRef<"ProcessVersion", 'Int'>
    readonly title: FieldRef<"ProcessVersion", 'String'>
    readonly description: FieldRef<"ProcessVersion", 'String'>
    readonly duration: FieldRef<"ProcessVersion", 'Int'>
    readonly progress: FieldRef<"ProcessVersion", 'Float'>
    readonly status: FieldRef<"ProcessVersion", 'ProcessStatus'>
    readonly x: FieldRef<"ProcessVersion", 'Float'>
    readonly y: FieldRef<"ProcessVersion", 'Float'>
    readonly color: FieldRef<"ProcessVersion", 'String'>
    readonly productionLineId: FieldRef<"ProcessVersion", 'String'>
    readonly createdAt: FieldRef<"ProcessVersion", 'DateTime'>
    readonly createdBy: FieldRef<"ProcessVersion", 'String'>
    readonly reason: FieldRef<"ProcessVersion", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ProcessVersion findUnique
   */
  export type ProcessVersionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcessVersion
     */
    select?: ProcessVersionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProcessVersion
     */
    omit?: ProcessVersionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessVersionInclude<ExtArgs> | null
    /**
     * Filter, which ProcessVersion to fetch.
     */
    where: ProcessVersionWhereUniqueInput
  }

  /**
   * ProcessVersion findUniqueOrThrow
   */
  export type ProcessVersionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcessVersion
     */
    select?: ProcessVersionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProcessVersion
     */
    omit?: ProcessVersionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessVersionInclude<ExtArgs> | null
    /**
     * Filter, which ProcessVersion to fetch.
     */
    where: ProcessVersionWhereUniqueInput
  }

  /**
   * ProcessVersion findFirst
   */
  export type ProcessVersionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcessVersion
     */
    select?: ProcessVersionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProcessVersion
     */
    omit?: ProcessVersionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessVersionInclude<ExtArgs> | null
    /**
     * Filter, which ProcessVersion to fetch.
     */
    where?: ProcessVersionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProcessVersions to fetch.
     */
    orderBy?: ProcessVersionOrderByWithRelationInput | ProcessVersionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProcessVersions.
     */
    cursor?: ProcessVersionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProcessVersions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProcessVersions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProcessVersions.
     */
    distinct?: ProcessVersionScalarFieldEnum | ProcessVersionScalarFieldEnum[]
  }

  /**
   * ProcessVersion findFirstOrThrow
   */
  export type ProcessVersionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcessVersion
     */
    select?: ProcessVersionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProcessVersion
     */
    omit?: ProcessVersionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessVersionInclude<ExtArgs> | null
    /**
     * Filter, which ProcessVersion to fetch.
     */
    where?: ProcessVersionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProcessVersions to fetch.
     */
    orderBy?: ProcessVersionOrderByWithRelationInput | ProcessVersionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProcessVersions.
     */
    cursor?: ProcessVersionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProcessVersions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProcessVersions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProcessVersions.
     */
    distinct?: ProcessVersionScalarFieldEnum | ProcessVersionScalarFieldEnum[]
  }

  /**
   * ProcessVersion findMany
   */
  export type ProcessVersionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcessVersion
     */
    select?: ProcessVersionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProcessVersion
     */
    omit?: ProcessVersionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessVersionInclude<ExtArgs> | null
    /**
     * Filter, which ProcessVersions to fetch.
     */
    where?: ProcessVersionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProcessVersions to fetch.
     */
    orderBy?: ProcessVersionOrderByWithRelationInput | ProcessVersionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProcessVersions.
     */
    cursor?: ProcessVersionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProcessVersions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProcessVersions.
     */
    skip?: number
    distinct?: ProcessVersionScalarFieldEnum | ProcessVersionScalarFieldEnum[]
  }

  /**
   * ProcessVersion create
   */
  export type ProcessVersionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcessVersion
     */
    select?: ProcessVersionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProcessVersion
     */
    omit?: ProcessVersionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessVersionInclude<ExtArgs> | null
    /**
     * The data needed to create a ProcessVersion.
     */
    data: XOR<ProcessVersionCreateInput, ProcessVersionUncheckedCreateInput>
  }

  /**
   * ProcessVersion createMany
   */
  export type ProcessVersionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProcessVersions.
     */
    data: ProcessVersionCreateManyInput | ProcessVersionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProcessVersion createManyAndReturn
   */
  export type ProcessVersionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcessVersion
     */
    select?: ProcessVersionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProcessVersion
     */
    omit?: ProcessVersionOmit<ExtArgs> | null
    /**
     * The data used to create many ProcessVersions.
     */
    data: ProcessVersionCreateManyInput | ProcessVersionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessVersionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProcessVersion update
   */
  export type ProcessVersionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcessVersion
     */
    select?: ProcessVersionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProcessVersion
     */
    omit?: ProcessVersionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessVersionInclude<ExtArgs> | null
    /**
     * The data needed to update a ProcessVersion.
     */
    data: XOR<ProcessVersionUpdateInput, ProcessVersionUncheckedUpdateInput>
    /**
     * Choose, which ProcessVersion to update.
     */
    where: ProcessVersionWhereUniqueInput
  }

  /**
   * ProcessVersion updateMany
   */
  export type ProcessVersionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProcessVersions.
     */
    data: XOR<ProcessVersionUpdateManyMutationInput, ProcessVersionUncheckedUpdateManyInput>
    /**
     * Filter which ProcessVersions to update
     */
    where?: ProcessVersionWhereInput
    /**
     * Limit how many ProcessVersions to update.
     */
    limit?: number
  }

  /**
   * ProcessVersion updateManyAndReturn
   */
  export type ProcessVersionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcessVersion
     */
    select?: ProcessVersionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProcessVersion
     */
    omit?: ProcessVersionOmit<ExtArgs> | null
    /**
     * The data used to update ProcessVersions.
     */
    data: XOR<ProcessVersionUpdateManyMutationInput, ProcessVersionUncheckedUpdateManyInput>
    /**
     * Filter which ProcessVersions to update
     */
    where?: ProcessVersionWhereInput
    /**
     * Limit how many ProcessVersions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessVersionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProcessVersion upsert
   */
  export type ProcessVersionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcessVersion
     */
    select?: ProcessVersionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProcessVersion
     */
    omit?: ProcessVersionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessVersionInclude<ExtArgs> | null
    /**
     * The filter to search for the ProcessVersion to update in case it exists.
     */
    where: ProcessVersionWhereUniqueInput
    /**
     * In case the ProcessVersion found by the `where` argument doesn't exist, create a new ProcessVersion with this data.
     */
    create: XOR<ProcessVersionCreateInput, ProcessVersionUncheckedCreateInput>
    /**
     * In case the ProcessVersion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProcessVersionUpdateInput, ProcessVersionUncheckedUpdateInput>
  }

  /**
   * ProcessVersion delete
   */
  export type ProcessVersionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcessVersion
     */
    select?: ProcessVersionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProcessVersion
     */
    omit?: ProcessVersionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessVersionInclude<ExtArgs> | null
    /**
     * Filter which ProcessVersion to delete.
     */
    where: ProcessVersionWhereUniqueInput
  }

  /**
   * ProcessVersion deleteMany
   */
  export type ProcessVersionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProcessVersions to delete
     */
    where?: ProcessVersionWhereInput
    /**
     * Limit how many ProcessVersions to delete.
     */
    limit?: number
  }

  /**
   * ProcessVersion without action
   */
  export type ProcessVersionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcessVersion
     */
    select?: ProcessVersionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProcessVersion
     */
    omit?: ProcessVersionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessVersionInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    firstName: 'firstName',
    lastName: 'lastName',
    role: 'role',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ProductionLineScalarFieldEnum: {
    id: 'id',
    name: 'name',
    status: 'status',
    version: 'version',
    isActive: 'isActive',
    parentId: 'parentId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdBy: 'createdBy',
    reason: 'reason'
  };

  export type ProductionLineScalarFieldEnum = (typeof ProductionLineScalarFieldEnum)[keyof typeof ProductionLineScalarFieldEnum]


  export const ProcessScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    duration: 'duration',
    progress: 'progress',
    status: 'status',
    x: 'x',
    y: 'y',
    color: 'color',
    version: 'version',
    isActive: 'isActive',
    parentId: 'parentId',
    productionLineId: 'productionLineId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdBy: 'createdBy',
    reason: 'reason'
  };

  export type ProcessScalarFieldEnum = (typeof ProcessScalarFieldEnum)[keyof typeof ProcessScalarFieldEnum]


  export const AuditLogScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    action: 'action',
    entityType: 'entityType',
    entityId: 'entityId',
    details: 'details',
    reason: 'reason',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    createdAt: 'createdAt'
  };

  export type AuditLogScalarFieldEnum = (typeof AuditLogScalarFieldEnum)[keyof typeof AuditLogScalarFieldEnum]


  export const ProductionLineVersionScalarFieldEnum: {
    id: 'id',
    entityId: 'entityId',
    version: 'version',
    name: 'name',
    status: 'status',
    createdAt: 'createdAt',
    createdBy: 'createdBy',
    reason: 'reason'
  };

  export type ProductionLineVersionScalarFieldEnum = (typeof ProductionLineVersionScalarFieldEnum)[keyof typeof ProductionLineVersionScalarFieldEnum]


  export const ProcessVersionScalarFieldEnum: {
    id: 'id',
    entityId: 'entityId',
    version: 'version',
    title: 'title',
    description: 'description',
    duration: 'duration',
    progress: 'progress',
    status: 'status',
    x: 'x',
    y: 'y',
    color: 'color',
    productionLineId: 'productionLineId',
    createdAt: 'createdAt',
    createdBy: 'createdBy',
    reason: 'reason'
  };

  export type ProcessVersionScalarFieldEnum = (typeof ProcessVersionScalarFieldEnum)[keyof typeof ProcessVersionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'ProductionLineStatus'
   */
  export type EnumProductionLineStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProductionLineStatus'>
    


  /**
   * Reference to a field of type 'ProductionLineStatus[]'
   */
  export type ListEnumProductionLineStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProductionLineStatus[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'ProcessStatus'
   */
  export type EnumProcessStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProcessStatus'>
    


  /**
   * Reference to a field of type 'ProcessStatus[]'
   */
  export type ListEnumProcessStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProcessStatus[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    firstName?: StringNullableFilter<"User"> | string | null
    lastName?: StringNullableFilter<"User"> | string | null
    role?: StringFilter<"User"> | string
    isActive?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    auditLogs?: AuditLogListRelationFilter
    processVersionsCreated?: ProcessVersionListRelationFilter
    createdProcesses?: ProcessListRelationFilter
    productionLineVersionsCreated?: ProductionLineVersionListRelationFilter
    createdProductionLines?: ProductionLineListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    auditLogs?: AuditLogOrderByRelationAggregateInput
    processVersionsCreated?: ProcessVersionOrderByRelationAggregateInput
    createdProcesses?: ProcessOrderByRelationAggregateInput
    productionLineVersionsCreated?: ProductionLineVersionOrderByRelationAggregateInput
    createdProductionLines?: ProductionLineOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    firstName?: StringNullableFilter<"User"> | string | null
    lastName?: StringNullableFilter<"User"> | string | null
    role?: StringFilter<"User"> | string
    isActive?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    auditLogs?: AuditLogListRelationFilter
    processVersionsCreated?: ProcessVersionListRelationFilter
    createdProcesses?: ProcessListRelationFilter
    productionLineVersionsCreated?: ProductionLineVersionListRelationFilter
    createdProductionLines?: ProductionLineListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    firstName?: StringNullableWithAggregatesFilter<"User"> | string | null
    lastName?: StringNullableWithAggregatesFilter<"User"> | string | null
    role?: StringWithAggregatesFilter<"User"> | string
    isActive?: BoolWithAggregatesFilter<"User"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type ProductionLineWhereInput = {
    AND?: ProductionLineWhereInput | ProductionLineWhereInput[]
    OR?: ProductionLineWhereInput[]
    NOT?: ProductionLineWhereInput | ProductionLineWhereInput[]
    id?: StringFilter<"ProductionLine"> | string
    name?: StringFilter<"ProductionLine"> | string
    status?: EnumProductionLineStatusFilter<"ProductionLine"> | $Enums.ProductionLineStatus
    version?: IntFilter<"ProductionLine"> | number
    isActive?: BoolFilter<"ProductionLine"> | boolean
    parentId?: StringNullableFilter<"ProductionLine"> | string | null
    createdAt?: DateTimeFilter<"ProductionLine"> | Date | string
    updatedAt?: DateTimeFilter<"ProductionLine"> | Date | string
    createdBy?: StringFilter<"ProductionLine"> | string
    reason?: StringFilter<"ProductionLine"> | string
    processes?: ProcessListRelationFilter
    versions?: ProductionLineVersionListRelationFilter
    creator?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type ProductionLineOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    status?: SortOrder
    version?: SortOrder
    isActive?: SortOrder
    parentId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrder
    reason?: SortOrder
    processes?: ProcessOrderByRelationAggregateInput
    versions?: ProductionLineVersionOrderByRelationAggregateInput
    creator?: UserOrderByWithRelationInput
  }

  export type ProductionLineWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProductionLineWhereInput | ProductionLineWhereInput[]
    OR?: ProductionLineWhereInput[]
    NOT?: ProductionLineWhereInput | ProductionLineWhereInput[]
    name?: StringFilter<"ProductionLine"> | string
    status?: EnumProductionLineStatusFilter<"ProductionLine"> | $Enums.ProductionLineStatus
    version?: IntFilter<"ProductionLine"> | number
    isActive?: BoolFilter<"ProductionLine"> | boolean
    parentId?: StringNullableFilter<"ProductionLine"> | string | null
    createdAt?: DateTimeFilter<"ProductionLine"> | Date | string
    updatedAt?: DateTimeFilter<"ProductionLine"> | Date | string
    createdBy?: StringFilter<"ProductionLine"> | string
    reason?: StringFilter<"ProductionLine"> | string
    processes?: ProcessListRelationFilter
    versions?: ProductionLineVersionListRelationFilter
    creator?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type ProductionLineOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    status?: SortOrder
    version?: SortOrder
    isActive?: SortOrder
    parentId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrder
    reason?: SortOrder
    _count?: ProductionLineCountOrderByAggregateInput
    _avg?: ProductionLineAvgOrderByAggregateInput
    _max?: ProductionLineMaxOrderByAggregateInput
    _min?: ProductionLineMinOrderByAggregateInput
    _sum?: ProductionLineSumOrderByAggregateInput
  }

  export type ProductionLineScalarWhereWithAggregatesInput = {
    AND?: ProductionLineScalarWhereWithAggregatesInput | ProductionLineScalarWhereWithAggregatesInput[]
    OR?: ProductionLineScalarWhereWithAggregatesInput[]
    NOT?: ProductionLineScalarWhereWithAggregatesInput | ProductionLineScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ProductionLine"> | string
    name?: StringWithAggregatesFilter<"ProductionLine"> | string
    status?: EnumProductionLineStatusWithAggregatesFilter<"ProductionLine"> | $Enums.ProductionLineStatus
    version?: IntWithAggregatesFilter<"ProductionLine"> | number
    isActive?: BoolWithAggregatesFilter<"ProductionLine"> | boolean
    parentId?: StringNullableWithAggregatesFilter<"ProductionLine"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ProductionLine"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ProductionLine"> | Date | string
    createdBy?: StringWithAggregatesFilter<"ProductionLine"> | string
    reason?: StringWithAggregatesFilter<"ProductionLine"> | string
  }

  export type ProcessWhereInput = {
    AND?: ProcessWhereInput | ProcessWhereInput[]
    OR?: ProcessWhereInput[]
    NOT?: ProcessWhereInput | ProcessWhereInput[]
    id?: StringFilter<"Process"> | string
    title?: StringFilter<"Process"> | string
    description?: StringNullableFilter<"Process"> | string | null
    duration?: IntNullableFilter<"Process"> | number | null
    progress?: FloatFilter<"Process"> | number
    status?: EnumProcessStatusFilter<"Process"> | $Enums.ProcessStatus
    x?: FloatFilter<"Process"> | number
    y?: FloatFilter<"Process"> | number
    color?: StringFilter<"Process"> | string
    version?: IntFilter<"Process"> | number
    isActive?: BoolFilter<"Process"> | boolean
    parentId?: StringNullableFilter<"Process"> | string | null
    productionLineId?: StringFilter<"Process"> | string
    createdAt?: DateTimeFilter<"Process"> | Date | string
    updatedAt?: DateTimeFilter<"Process"> | Date | string
    createdBy?: StringFilter<"Process"> | string
    reason?: StringFilter<"Process"> | string
    versions?: ProcessVersionListRelationFilter
    creator?: XOR<UserScalarRelationFilter, UserWhereInput>
    productionLine?: XOR<ProductionLineScalarRelationFilter, ProductionLineWhereInput>
  }

  export type ProcessOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    duration?: SortOrderInput | SortOrder
    progress?: SortOrder
    status?: SortOrder
    x?: SortOrder
    y?: SortOrder
    color?: SortOrder
    version?: SortOrder
    isActive?: SortOrder
    parentId?: SortOrderInput | SortOrder
    productionLineId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrder
    reason?: SortOrder
    versions?: ProcessVersionOrderByRelationAggregateInput
    creator?: UserOrderByWithRelationInput
    productionLine?: ProductionLineOrderByWithRelationInput
  }

  export type ProcessWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProcessWhereInput | ProcessWhereInput[]
    OR?: ProcessWhereInput[]
    NOT?: ProcessWhereInput | ProcessWhereInput[]
    title?: StringFilter<"Process"> | string
    description?: StringNullableFilter<"Process"> | string | null
    duration?: IntNullableFilter<"Process"> | number | null
    progress?: FloatFilter<"Process"> | number
    status?: EnumProcessStatusFilter<"Process"> | $Enums.ProcessStatus
    x?: FloatFilter<"Process"> | number
    y?: FloatFilter<"Process"> | number
    color?: StringFilter<"Process"> | string
    version?: IntFilter<"Process"> | number
    isActive?: BoolFilter<"Process"> | boolean
    parentId?: StringNullableFilter<"Process"> | string | null
    productionLineId?: StringFilter<"Process"> | string
    createdAt?: DateTimeFilter<"Process"> | Date | string
    updatedAt?: DateTimeFilter<"Process"> | Date | string
    createdBy?: StringFilter<"Process"> | string
    reason?: StringFilter<"Process"> | string
    versions?: ProcessVersionListRelationFilter
    creator?: XOR<UserScalarRelationFilter, UserWhereInput>
    productionLine?: XOR<ProductionLineScalarRelationFilter, ProductionLineWhereInput>
  }, "id">

  export type ProcessOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    duration?: SortOrderInput | SortOrder
    progress?: SortOrder
    status?: SortOrder
    x?: SortOrder
    y?: SortOrder
    color?: SortOrder
    version?: SortOrder
    isActive?: SortOrder
    parentId?: SortOrderInput | SortOrder
    productionLineId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrder
    reason?: SortOrder
    _count?: ProcessCountOrderByAggregateInput
    _avg?: ProcessAvgOrderByAggregateInput
    _max?: ProcessMaxOrderByAggregateInput
    _min?: ProcessMinOrderByAggregateInput
    _sum?: ProcessSumOrderByAggregateInput
  }

  export type ProcessScalarWhereWithAggregatesInput = {
    AND?: ProcessScalarWhereWithAggregatesInput | ProcessScalarWhereWithAggregatesInput[]
    OR?: ProcessScalarWhereWithAggregatesInput[]
    NOT?: ProcessScalarWhereWithAggregatesInput | ProcessScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Process"> | string
    title?: StringWithAggregatesFilter<"Process"> | string
    description?: StringNullableWithAggregatesFilter<"Process"> | string | null
    duration?: IntNullableWithAggregatesFilter<"Process"> | number | null
    progress?: FloatWithAggregatesFilter<"Process"> | number
    status?: EnumProcessStatusWithAggregatesFilter<"Process"> | $Enums.ProcessStatus
    x?: FloatWithAggregatesFilter<"Process"> | number
    y?: FloatWithAggregatesFilter<"Process"> | number
    color?: StringWithAggregatesFilter<"Process"> | string
    version?: IntWithAggregatesFilter<"Process"> | number
    isActive?: BoolWithAggregatesFilter<"Process"> | boolean
    parentId?: StringNullableWithAggregatesFilter<"Process"> | string | null
    productionLineId?: StringWithAggregatesFilter<"Process"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Process"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Process"> | Date | string
    createdBy?: StringWithAggregatesFilter<"Process"> | string
    reason?: StringWithAggregatesFilter<"Process"> | string
  }

  export type AuditLogWhereInput = {
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    id?: StringFilter<"AuditLog"> | string
    userId?: StringFilter<"AuditLog"> | string
    action?: StringFilter<"AuditLog"> | string
    entityType?: StringFilter<"AuditLog"> | string
    entityId?: StringFilter<"AuditLog"> | string
    details?: JsonNullableFilter<"AuditLog">
    reason?: StringNullableFilter<"AuditLog"> | string | null
    ipAddress?: StringNullableFilter<"AuditLog"> | string | null
    userAgent?: StringNullableFilter<"AuditLog"> | string | null
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type AuditLogOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    details?: SortOrderInput | SortOrder
    reason?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AuditLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    userId?: StringFilter<"AuditLog"> | string
    action?: StringFilter<"AuditLog"> | string
    entityType?: StringFilter<"AuditLog"> | string
    entityId?: StringFilter<"AuditLog"> | string
    details?: JsonNullableFilter<"AuditLog">
    reason?: StringNullableFilter<"AuditLog"> | string | null
    ipAddress?: StringNullableFilter<"AuditLog"> | string | null
    userAgent?: StringNullableFilter<"AuditLog"> | string | null
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type AuditLogOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    details?: SortOrderInput | SortOrder
    reason?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: AuditLogCountOrderByAggregateInput
    _max?: AuditLogMaxOrderByAggregateInput
    _min?: AuditLogMinOrderByAggregateInput
  }

  export type AuditLogScalarWhereWithAggregatesInput = {
    AND?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    OR?: AuditLogScalarWhereWithAggregatesInput[]
    NOT?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AuditLog"> | string
    userId?: StringWithAggregatesFilter<"AuditLog"> | string
    action?: StringWithAggregatesFilter<"AuditLog"> | string
    entityType?: StringWithAggregatesFilter<"AuditLog"> | string
    entityId?: StringWithAggregatesFilter<"AuditLog"> | string
    details?: JsonNullableWithAggregatesFilter<"AuditLog">
    reason?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    ipAddress?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"AuditLog"> | Date | string
  }

  export type ProductionLineVersionWhereInput = {
    AND?: ProductionLineVersionWhereInput | ProductionLineVersionWhereInput[]
    OR?: ProductionLineVersionWhereInput[]
    NOT?: ProductionLineVersionWhereInput | ProductionLineVersionWhereInput[]
    id?: StringFilter<"ProductionLineVersion"> | string
    entityId?: StringFilter<"ProductionLineVersion"> | string
    version?: IntFilter<"ProductionLineVersion"> | number
    name?: StringFilter<"ProductionLineVersion"> | string
    status?: EnumProductionLineStatusFilter<"ProductionLineVersion"> | $Enums.ProductionLineStatus
    createdAt?: DateTimeFilter<"ProductionLineVersion"> | Date | string
    createdBy?: StringFilter<"ProductionLineVersion"> | string
    reason?: StringFilter<"ProductionLineVersion"> | string
    creator?: XOR<UserScalarRelationFilter, UserWhereInput>
    entity?: XOR<ProductionLineScalarRelationFilter, ProductionLineWhereInput>
  }

  export type ProductionLineVersionOrderByWithRelationInput = {
    id?: SortOrder
    entityId?: SortOrder
    version?: SortOrder
    name?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    reason?: SortOrder
    creator?: UserOrderByWithRelationInput
    entity?: ProductionLineOrderByWithRelationInput
  }

  export type ProductionLineVersionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    entityId_version?: ProductionLineVersionEntityIdVersionCompoundUniqueInput
    AND?: ProductionLineVersionWhereInput | ProductionLineVersionWhereInput[]
    OR?: ProductionLineVersionWhereInput[]
    NOT?: ProductionLineVersionWhereInput | ProductionLineVersionWhereInput[]
    entityId?: StringFilter<"ProductionLineVersion"> | string
    version?: IntFilter<"ProductionLineVersion"> | number
    name?: StringFilter<"ProductionLineVersion"> | string
    status?: EnumProductionLineStatusFilter<"ProductionLineVersion"> | $Enums.ProductionLineStatus
    createdAt?: DateTimeFilter<"ProductionLineVersion"> | Date | string
    createdBy?: StringFilter<"ProductionLineVersion"> | string
    reason?: StringFilter<"ProductionLineVersion"> | string
    creator?: XOR<UserScalarRelationFilter, UserWhereInput>
    entity?: XOR<ProductionLineScalarRelationFilter, ProductionLineWhereInput>
  }, "id" | "entityId_version">

  export type ProductionLineVersionOrderByWithAggregationInput = {
    id?: SortOrder
    entityId?: SortOrder
    version?: SortOrder
    name?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    reason?: SortOrder
    _count?: ProductionLineVersionCountOrderByAggregateInput
    _avg?: ProductionLineVersionAvgOrderByAggregateInput
    _max?: ProductionLineVersionMaxOrderByAggregateInput
    _min?: ProductionLineVersionMinOrderByAggregateInput
    _sum?: ProductionLineVersionSumOrderByAggregateInput
  }

  export type ProductionLineVersionScalarWhereWithAggregatesInput = {
    AND?: ProductionLineVersionScalarWhereWithAggregatesInput | ProductionLineVersionScalarWhereWithAggregatesInput[]
    OR?: ProductionLineVersionScalarWhereWithAggregatesInput[]
    NOT?: ProductionLineVersionScalarWhereWithAggregatesInput | ProductionLineVersionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ProductionLineVersion"> | string
    entityId?: StringWithAggregatesFilter<"ProductionLineVersion"> | string
    version?: IntWithAggregatesFilter<"ProductionLineVersion"> | number
    name?: StringWithAggregatesFilter<"ProductionLineVersion"> | string
    status?: EnumProductionLineStatusWithAggregatesFilter<"ProductionLineVersion"> | $Enums.ProductionLineStatus
    createdAt?: DateTimeWithAggregatesFilter<"ProductionLineVersion"> | Date | string
    createdBy?: StringWithAggregatesFilter<"ProductionLineVersion"> | string
    reason?: StringWithAggregatesFilter<"ProductionLineVersion"> | string
  }

  export type ProcessVersionWhereInput = {
    AND?: ProcessVersionWhereInput | ProcessVersionWhereInput[]
    OR?: ProcessVersionWhereInput[]
    NOT?: ProcessVersionWhereInput | ProcessVersionWhereInput[]
    id?: StringFilter<"ProcessVersion"> | string
    entityId?: StringFilter<"ProcessVersion"> | string
    version?: IntFilter<"ProcessVersion"> | number
    title?: StringFilter<"ProcessVersion"> | string
    description?: StringNullableFilter<"ProcessVersion"> | string | null
    duration?: IntNullableFilter<"ProcessVersion"> | number | null
    progress?: FloatFilter<"ProcessVersion"> | number
    status?: EnumProcessStatusFilter<"ProcessVersion"> | $Enums.ProcessStatus
    x?: FloatFilter<"ProcessVersion"> | number
    y?: FloatFilter<"ProcessVersion"> | number
    color?: StringFilter<"ProcessVersion"> | string
    productionLineId?: StringFilter<"ProcessVersion"> | string
    createdAt?: DateTimeFilter<"ProcessVersion"> | Date | string
    createdBy?: StringFilter<"ProcessVersion"> | string
    reason?: StringFilter<"ProcessVersion"> | string
    creator?: XOR<UserScalarRelationFilter, UserWhereInput>
    entity?: XOR<ProcessScalarRelationFilter, ProcessWhereInput>
  }

  export type ProcessVersionOrderByWithRelationInput = {
    id?: SortOrder
    entityId?: SortOrder
    version?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    duration?: SortOrderInput | SortOrder
    progress?: SortOrder
    status?: SortOrder
    x?: SortOrder
    y?: SortOrder
    color?: SortOrder
    productionLineId?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    reason?: SortOrder
    creator?: UserOrderByWithRelationInput
    entity?: ProcessOrderByWithRelationInput
  }

  export type ProcessVersionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    entityId_version?: ProcessVersionEntityIdVersionCompoundUniqueInput
    AND?: ProcessVersionWhereInput | ProcessVersionWhereInput[]
    OR?: ProcessVersionWhereInput[]
    NOT?: ProcessVersionWhereInput | ProcessVersionWhereInput[]
    entityId?: StringFilter<"ProcessVersion"> | string
    version?: IntFilter<"ProcessVersion"> | number
    title?: StringFilter<"ProcessVersion"> | string
    description?: StringNullableFilter<"ProcessVersion"> | string | null
    duration?: IntNullableFilter<"ProcessVersion"> | number | null
    progress?: FloatFilter<"ProcessVersion"> | number
    status?: EnumProcessStatusFilter<"ProcessVersion"> | $Enums.ProcessStatus
    x?: FloatFilter<"ProcessVersion"> | number
    y?: FloatFilter<"ProcessVersion"> | number
    color?: StringFilter<"ProcessVersion"> | string
    productionLineId?: StringFilter<"ProcessVersion"> | string
    createdAt?: DateTimeFilter<"ProcessVersion"> | Date | string
    createdBy?: StringFilter<"ProcessVersion"> | string
    reason?: StringFilter<"ProcessVersion"> | string
    creator?: XOR<UserScalarRelationFilter, UserWhereInput>
    entity?: XOR<ProcessScalarRelationFilter, ProcessWhereInput>
  }, "id" | "entityId_version">

  export type ProcessVersionOrderByWithAggregationInput = {
    id?: SortOrder
    entityId?: SortOrder
    version?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    duration?: SortOrderInput | SortOrder
    progress?: SortOrder
    status?: SortOrder
    x?: SortOrder
    y?: SortOrder
    color?: SortOrder
    productionLineId?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    reason?: SortOrder
    _count?: ProcessVersionCountOrderByAggregateInput
    _avg?: ProcessVersionAvgOrderByAggregateInput
    _max?: ProcessVersionMaxOrderByAggregateInput
    _min?: ProcessVersionMinOrderByAggregateInput
    _sum?: ProcessVersionSumOrderByAggregateInput
  }

  export type ProcessVersionScalarWhereWithAggregatesInput = {
    AND?: ProcessVersionScalarWhereWithAggregatesInput | ProcessVersionScalarWhereWithAggregatesInput[]
    OR?: ProcessVersionScalarWhereWithAggregatesInput[]
    NOT?: ProcessVersionScalarWhereWithAggregatesInput | ProcessVersionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ProcessVersion"> | string
    entityId?: StringWithAggregatesFilter<"ProcessVersion"> | string
    version?: IntWithAggregatesFilter<"ProcessVersion"> | number
    title?: StringWithAggregatesFilter<"ProcessVersion"> | string
    description?: StringNullableWithAggregatesFilter<"ProcessVersion"> | string | null
    duration?: IntNullableWithAggregatesFilter<"ProcessVersion"> | number | null
    progress?: FloatWithAggregatesFilter<"ProcessVersion"> | number
    status?: EnumProcessStatusWithAggregatesFilter<"ProcessVersion"> | $Enums.ProcessStatus
    x?: FloatWithAggregatesFilter<"ProcessVersion"> | number
    y?: FloatWithAggregatesFilter<"ProcessVersion"> | number
    color?: StringWithAggregatesFilter<"ProcessVersion"> | string
    productionLineId?: StringWithAggregatesFilter<"ProcessVersion"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ProcessVersion"> | Date | string
    createdBy?: StringWithAggregatesFilter<"ProcessVersion"> | string
    reason?: StringWithAggregatesFilter<"ProcessVersion"> | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    password: string
    firstName?: string | null
    lastName?: string | null
    role?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    processVersionsCreated?: ProcessVersionCreateNestedManyWithoutCreatorInput
    createdProcesses?: ProcessCreateNestedManyWithoutCreatorInput
    productionLineVersionsCreated?: ProductionLineVersionCreateNestedManyWithoutCreatorInput
    createdProductionLines?: ProductionLineCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    password: string
    firstName?: string | null
    lastName?: string | null
    role?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    processVersionsCreated?: ProcessVersionUncheckedCreateNestedManyWithoutCreatorInput
    createdProcesses?: ProcessUncheckedCreateNestedManyWithoutCreatorInput
    productionLineVersionsCreated?: ProductionLineVersionUncheckedCreateNestedManyWithoutCreatorInput
    createdProductionLines?: ProductionLineUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    processVersionsCreated?: ProcessVersionUpdateManyWithoutCreatorNestedInput
    createdProcesses?: ProcessUpdateManyWithoutCreatorNestedInput
    productionLineVersionsCreated?: ProductionLineVersionUpdateManyWithoutCreatorNestedInput
    createdProductionLines?: ProductionLineUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    processVersionsCreated?: ProcessVersionUncheckedUpdateManyWithoutCreatorNestedInput
    createdProcesses?: ProcessUncheckedUpdateManyWithoutCreatorNestedInput
    productionLineVersionsCreated?: ProductionLineVersionUncheckedUpdateManyWithoutCreatorNestedInput
    createdProductionLines?: ProductionLineUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    password: string
    firstName?: string | null
    lastName?: string | null
    role?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductionLineCreateInput = {
    id?: string
    name: string
    status?: $Enums.ProductionLineStatus
    version?: number
    isActive?: boolean
    parentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reason: string
    processes?: ProcessCreateNestedManyWithoutProductionLineInput
    versions?: ProductionLineVersionCreateNestedManyWithoutEntityInput
    creator: UserCreateNestedOneWithoutCreatedProductionLinesInput
  }

  export type ProductionLineUncheckedCreateInput = {
    id?: string
    name: string
    status?: $Enums.ProductionLineStatus
    version?: number
    isActive?: boolean
    parentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: string
    reason: string
    processes?: ProcessUncheckedCreateNestedManyWithoutProductionLineInput
    versions?: ProductionLineVersionUncheckedCreateNestedManyWithoutEntityInput
  }

  export type ProductionLineUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumProductionLineStatusFieldUpdateOperationsInput | $Enums.ProductionLineStatus
    version?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: StringFieldUpdateOperationsInput | string
    processes?: ProcessUpdateManyWithoutProductionLineNestedInput
    versions?: ProductionLineVersionUpdateManyWithoutEntityNestedInput
    creator?: UserUpdateOneRequiredWithoutCreatedProductionLinesNestedInput
  }

  export type ProductionLineUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumProductionLineStatusFieldUpdateOperationsInput | $Enums.ProductionLineStatus
    version?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    processes?: ProcessUncheckedUpdateManyWithoutProductionLineNestedInput
    versions?: ProductionLineVersionUncheckedUpdateManyWithoutEntityNestedInput
  }

  export type ProductionLineCreateManyInput = {
    id?: string
    name: string
    status?: $Enums.ProductionLineStatus
    version?: number
    isActive?: boolean
    parentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: string
    reason: string
  }

  export type ProductionLineUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumProductionLineStatusFieldUpdateOperationsInput | $Enums.ProductionLineStatus
    version?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: StringFieldUpdateOperationsInput | string
  }

  export type ProductionLineUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumProductionLineStatusFieldUpdateOperationsInput | $Enums.ProductionLineStatus
    version?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
  }

  export type ProcessCreateInput = {
    id?: string
    title: string
    description?: string | null
    duration?: number | null
    progress?: number
    status?: $Enums.ProcessStatus
    x?: number
    y?: number
    color?: string
    version?: number
    isActive?: boolean
    parentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reason: string
    versions?: ProcessVersionCreateNestedManyWithoutEntityInput
    creator: UserCreateNestedOneWithoutCreatedProcessesInput
    productionLine: ProductionLineCreateNestedOneWithoutProcessesInput
  }

  export type ProcessUncheckedCreateInput = {
    id?: string
    title: string
    description?: string | null
    duration?: number | null
    progress?: number
    status?: $Enums.ProcessStatus
    x?: number
    y?: number
    color?: string
    version?: number
    isActive?: boolean
    parentId?: string | null
    productionLineId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: string
    reason: string
    versions?: ProcessVersionUncheckedCreateNestedManyWithoutEntityInput
  }

  export type ProcessUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    progress?: FloatFieldUpdateOperationsInput | number
    status?: EnumProcessStatusFieldUpdateOperationsInput | $Enums.ProcessStatus
    x?: FloatFieldUpdateOperationsInput | number
    y?: FloatFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: StringFieldUpdateOperationsInput | string
    versions?: ProcessVersionUpdateManyWithoutEntityNestedInput
    creator?: UserUpdateOneRequiredWithoutCreatedProcessesNestedInput
    productionLine?: ProductionLineUpdateOneRequiredWithoutProcessesNestedInput
  }

  export type ProcessUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    progress?: FloatFieldUpdateOperationsInput | number
    status?: EnumProcessStatusFieldUpdateOperationsInput | $Enums.ProcessStatus
    x?: FloatFieldUpdateOperationsInput | number
    y?: FloatFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    productionLineId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    versions?: ProcessVersionUncheckedUpdateManyWithoutEntityNestedInput
  }

  export type ProcessCreateManyInput = {
    id?: string
    title: string
    description?: string | null
    duration?: number | null
    progress?: number
    status?: $Enums.ProcessStatus
    x?: number
    y?: number
    color?: string
    version?: number
    isActive?: boolean
    parentId?: string | null
    productionLineId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: string
    reason: string
  }

  export type ProcessUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    progress?: FloatFieldUpdateOperationsInput | number
    status?: EnumProcessStatusFieldUpdateOperationsInput | $Enums.ProcessStatus
    x?: FloatFieldUpdateOperationsInput | number
    y?: FloatFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: StringFieldUpdateOperationsInput | string
  }

  export type ProcessUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    progress?: FloatFieldUpdateOperationsInput | number
    status?: EnumProcessStatusFieldUpdateOperationsInput | $Enums.ProcessStatus
    x?: FloatFieldUpdateOperationsInput | number
    y?: FloatFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    productionLineId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
  }

  export type AuditLogCreateInput = {
    id?: string
    action: string
    entityType: string
    entityId: string
    details?: NullableJsonNullValueInput | InputJsonValue
    reason?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutAuditLogsInput
  }

  export type AuditLogUncheckedCreateInput = {
    id?: string
    userId: string
    action: string
    entityType: string
    entityId: string
    details?: NullableJsonNullValueInput | InputJsonValue
    reason?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type AuditLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    details?: NullableJsonNullValueInput | InputJsonValue
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAuditLogsNestedInput
  }

  export type AuditLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    details?: NullableJsonNullValueInput | InputJsonValue
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogCreateManyInput = {
    id?: string
    userId: string
    action: string
    entityType: string
    entityId: string
    details?: NullableJsonNullValueInput | InputJsonValue
    reason?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type AuditLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    details?: NullableJsonNullValueInput | InputJsonValue
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    details?: NullableJsonNullValueInput | InputJsonValue
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductionLineVersionCreateInput = {
    id?: string
    version: number
    name: string
    status: $Enums.ProductionLineStatus
    createdAt?: Date | string
    reason: string
    creator: UserCreateNestedOneWithoutProductionLineVersionsCreatedInput
    entity: ProductionLineCreateNestedOneWithoutVersionsInput
  }

  export type ProductionLineVersionUncheckedCreateInput = {
    id?: string
    entityId: string
    version: number
    name: string
    status: $Enums.ProductionLineStatus
    createdAt?: Date | string
    createdBy: string
    reason: string
  }

  export type ProductionLineVersionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumProductionLineStatusFieldUpdateOperationsInput | $Enums.ProductionLineStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: StringFieldUpdateOperationsInput | string
    creator?: UserUpdateOneRequiredWithoutProductionLineVersionsCreatedNestedInput
    entity?: ProductionLineUpdateOneRequiredWithoutVersionsNestedInput
  }

  export type ProductionLineVersionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumProductionLineStatusFieldUpdateOperationsInput | $Enums.ProductionLineStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
  }

  export type ProductionLineVersionCreateManyInput = {
    id?: string
    entityId: string
    version: number
    name: string
    status: $Enums.ProductionLineStatus
    createdAt?: Date | string
    createdBy: string
    reason: string
  }

  export type ProductionLineVersionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumProductionLineStatusFieldUpdateOperationsInput | $Enums.ProductionLineStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: StringFieldUpdateOperationsInput | string
  }

  export type ProductionLineVersionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumProductionLineStatusFieldUpdateOperationsInput | $Enums.ProductionLineStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
  }

  export type ProcessVersionCreateInput = {
    id?: string
    version: number
    title: string
    description?: string | null
    duration?: number | null
    progress: number
    status: $Enums.ProcessStatus
    x: number
    y: number
    color: string
    productionLineId: string
    createdAt?: Date | string
    reason: string
    creator: UserCreateNestedOneWithoutProcessVersionsCreatedInput
    entity: ProcessCreateNestedOneWithoutVersionsInput
  }

  export type ProcessVersionUncheckedCreateInput = {
    id?: string
    entityId: string
    version: number
    title: string
    description?: string | null
    duration?: number | null
    progress: number
    status: $Enums.ProcessStatus
    x: number
    y: number
    color: string
    productionLineId: string
    createdAt?: Date | string
    createdBy: string
    reason: string
  }

  export type ProcessVersionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    progress?: FloatFieldUpdateOperationsInput | number
    status?: EnumProcessStatusFieldUpdateOperationsInput | $Enums.ProcessStatus
    x?: FloatFieldUpdateOperationsInput | number
    y?: FloatFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    productionLineId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: StringFieldUpdateOperationsInput | string
    creator?: UserUpdateOneRequiredWithoutProcessVersionsCreatedNestedInput
    entity?: ProcessUpdateOneRequiredWithoutVersionsNestedInput
  }

  export type ProcessVersionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    progress?: FloatFieldUpdateOperationsInput | number
    status?: EnumProcessStatusFieldUpdateOperationsInput | $Enums.ProcessStatus
    x?: FloatFieldUpdateOperationsInput | number
    y?: FloatFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    productionLineId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
  }

  export type ProcessVersionCreateManyInput = {
    id?: string
    entityId: string
    version: number
    title: string
    description?: string | null
    duration?: number | null
    progress: number
    status: $Enums.ProcessStatus
    x: number
    y: number
    color: string
    productionLineId: string
    createdAt?: Date | string
    createdBy: string
    reason: string
  }

  export type ProcessVersionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    progress?: FloatFieldUpdateOperationsInput | number
    status?: EnumProcessStatusFieldUpdateOperationsInput | $Enums.ProcessStatus
    x?: FloatFieldUpdateOperationsInput | number
    y?: FloatFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    productionLineId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: StringFieldUpdateOperationsInput | string
  }

  export type ProcessVersionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    progress?: FloatFieldUpdateOperationsInput | number
    status?: EnumProcessStatusFieldUpdateOperationsInput | $Enums.ProcessStatus
    x?: FloatFieldUpdateOperationsInput | number
    y?: FloatFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    productionLineId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type AuditLogListRelationFilter = {
    every?: AuditLogWhereInput
    some?: AuditLogWhereInput
    none?: AuditLogWhereInput
  }

  export type ProcessVersionListRelationFilter = {
    every?: ProcessVersionWhereInput
    some?: ProcessVersionWhereInput
    none?: ProcessVersionWhereInput
  }

  export type ProcessListRelationFilter = {
    every?: ProcessWhereInput
    some?: ProcessWhereInput
    none?: ProcessWhereInput
  }

  export type ProductionLineVersionListRelationFilter = {
    every?: ProductionLineVersionWhereInput
    some?: ProductionLineVersionWhereInput
    none?: ProductionLineVersionWhereInput
  }

  export type ProductionLineListRelationFilter = {
    every?: ProductionLineWhereInput
    some?: ProductionLineWhereInput
    none?: ProductionLineWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AuditLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProcessVersionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProcessOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProductionLineVersionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProductionLineOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumProductionLineStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ProductionLineStatus | EnumProductionLineStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ProductionLineStatus[] | ListEnumProductionLineStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProductionLineStatus[] | ListEnumProductionLineStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumProductionLineStatusFilter<$PrismaModel> | $Enums.ProductionLineStatus
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ProductionLineCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    status?: SortOrder
    version?: SortOrder
    isActive?: SortOrder
    parentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrder
    reason?: SortOrder
  }

  export type ProductionLineAvgOrderByAggregateInput = {
    version?: SortOrder
  }

  export type ProductionLineMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    status?: SortOrder
    version?: SortOrder
    isActive?: SortOrder
    parentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrder
    reason?: SortOrder
  }

  export type ProductionLineMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    status?: SortOrder
    version?: SortOrder
    isActive?: SortOrder
    parentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrder
    reason?: SortOrder
  }

  export type ProductionLineSumOrderByAggregateInput = {
    version?: SortOrder
  }

  export type EnumProductionLineStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProductionLineStatus | EnumProductionLineStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ProductionLineStatus[] | ListEnumProductionLineStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProductionLineStatus[] | ListEnumProductionLineStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumProductionLineStatusWithAggregatesFilter<$PrismaModel> | $Enums.ProductionLineStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProductionLineStatusFilter<$PrismaModel>
    _max?: NestedEnumProductionLineStatusFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type EnumProcessStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ProcessStatus | EnumProcessStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ProcessStatus[] | ListEnumProcessStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProcessStatus[] | ListEnumProcessStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumProcessStatusFilter<$PrismaModel> | $Enums.ProcessStatus
  }

  export type ProductionLineScalarRelationFilter = {
    is?: ProductionLineWhereInput
    isNot?: ProductionLineWhereInput
  }

  export type ProcessCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    duration?: SortOrder
    progress?: SortOrder
    status?: SortOrder
    x?: SortOrder
    y?: SortOrder
    color?: SortOrder
    version?: SortOrder
    isActive?: SortOrder
    parentId?: SortOrder
    productionLineId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrder
    reason?: SortOrder
  }

  export type ProcessAvgOrderByAggregateInput = {
    duration?: SortOrder
    progress?: SortOrder
    x?: SortOrder
    y?: SortOrder
    version?: SortOrder
  }

  export type ProcessMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    duration?: SortOrder
    progress?: SortOrder
    status?: SortOrder
    x?: SortOrder
    y?: SortOrder
    color?: SortOrder
    version?: SortOrder
    isActive?: SortOrder
    parentId?: SortOrder
    productionLineId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrder
    reason?: SortOrder
  }

  export type ProcessMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    duration?: SortOrder
    progress?: SortOrder
    status?: SortOrder
    x?: SortOrder
    y?: SortOrder
    color?: SortOrder
    version?: SortOrder
    isActive?: SortOrder
    parentId?: SortOrder
    productionLineId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrder
    reason?: SortOrder
  }

  export type ProcessSumOrderByAggregateInput = {
    duration?: SortOrder
    progress?: SortOrder
    x?: SortOrder
    y?: SortOrder
    version?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type EnumProcessStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProcessStatus | EnumProcessStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ProcessStatus[] | ListEnumProcessStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProcessStatus[] | ListEnumProcessStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumProcessStatusWithAggregatesFilter<$PrismaModel> | $Enums.ProcessStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProcessStatusFilter<$PrismaModel>
    _max?: NestedEnumProcessStatusFilter<$PrismaModel>
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type AuditLogCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    details?: SortOrder
    reason?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
  }

  export type AuditLogMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    reason?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
  }

  export type AuditLogMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    reason?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type ProductionLineVersionEntityIdVersionCompoundUniqueInput = {
    entityId: string
    version: number
  }

  export type ProductionLineVersionCountOrderByAggregateInput = {
    id?: SortOrder
    entityId?: SortOrder
    version?: SortOrder
    name?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    reason?: SortOrder
  }

  export type ProductionLineVersionAvgOrderByAggregateInput = {
    version?: SortOrder
  }

  export type ProductionLineVersionMaxOrderByAggregateInput = {
    id?: SortOrder
    entityId?: SortOrder
    version?: SortOrder
    name?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    reason?: SortOrder
  }

  export type ProductionLineVersionMinOrderByAggregateInput = {
    id?: SortOrder
    entityId?: SortOrder
    version?: SortOrder
    name?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    reason?: SortOrder
  }

  export type ProductionLineVersionSumOrderByAggregateInput = {
    version?: SortOrder
  }

  export type ProcessScalarRelationFilter = {
    is?: ProcessWhereInput
    isNot?: ProcessWhereInput
  }

  export type ProcessVersionEntityIdVersionCompoundUniqueInput = {
    entityId: string
    version: number
  }

  export type ProcessVersionCountOrderByAggregateInput = {
    id?: SortOrder
    entityId?: SortOrder
    version?: SortOrder
    title?: SortOrder
    description?: SortOrder
    duration?: SortOrder
    progress?: SortOrder
    status?: SortOrder
    x?: SortOrder
    y?: SortOrder
    color?: SortOrder
    productionLineId?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    reason?: SortOrder
  }

  export type ProcessVersionAvgOrderByAggregateInput = {
    version?: SortOrder
    duration?: SortOrder
    progress?: SortOrder
    x?: SortOrder
    y?: SortOrder
  }

  export type ProcessVersionMaxOrderByAggregateInput = {
    id?: SortOrder
    entityId?: SortOrder
    version?: SortOrder
    title?: SortOrder
    description?: SortOrder
    duration?: SortOrder
    progress?: SortOrder
    status?: SortOrder
    x?: SortOrder
    y?: SortOrder
    color?: SortOrder
    productionLineId?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    reason?: SortOrder
  }

  export type ProcessVersionMinOrderByAggregateInput = {
    id?: SortOrder
    entityId?: SortOrder
    version?: SortOrder
    title?: SortOrder
    description?: SortOrder
    duration?: SortOrder
    progress?: SortOrder
    status?: SortOrder
    x?: SortOrder
    y?: SortOrder
    color?: SortOrder
    productionLineId?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    reason?: SortOrder
  }

  export type ProcessVersionSumOrderByAggregateInput = {
    version?: SortOrder
    duration?: SortOrder
    progress?: SortOrder
    x?: SortOrder
    y?: SortOrder
  }

  export type AuditLogCreateNestedManyWithoutUserInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type ProcessVersionCreateNestedManyWithoutCreatorInput = {
    create?: XOR<ProcessVersionCreateWithoutCreatorInput, ProcessVersionUncheckedCreateWithoutCreatorInput> | ProcessVersionCreateWithoutCreatorInput[] | ProcessVersionUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ProcessVersionCreateOrConnectWithoutCreatorInput | ProcessVersionCreateOrConnectWithoutCreatorInput[]
    createMany?: ProcessVersionCreateManyCreatorInputEnvelope
    connect?: ProcessVersionWhereUniqueInput | ProcessVersionWhereUniqueInput[]
  }

  export type ProcessCreateNestedManyWithoutCreatorInput = {
    create?: XOR<ProcessCreateWithoutCreatorInput, ProcessUncheckedCreateWithoutCreatorInput> | ProcessCreateWithoutCreatorInput[] | ProcessUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ProcessCreateOrConnectWithoutCreatorInput | ProcessCreateOrConnectWithoutCreatorInput[]
    createMany?: ProcessCreateManyCreatorInputEnvelope
    connect?: ProcessWhereUniqueInput | ProcessWhereUniqueInput[]
  }

  export type ProductionLineVersionCreateNestedManyWithoutCreatorInput = {
    create?: XOR<ProductionLineVersionCreateWithoutCreatorInput, ProductionLineVersionUncheckedCreateWithoutCreatorInput> | ProductionLineVersionCreateWithoutCreatorInput[] | ProductionLineVersionUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ProductionLineVersionCreateOrConnectWithoutCreatorInput | ProductionLineVersionCreateOrConnectWithoutCreatorInput[]
    createMany?: ProductionLineVersionCreateManyCreatorInputEnvelope
    connect?: ProductionLineVersionWhereUniqueInput | ProductionLineVersionWhereUniqueInput[]
  }

  export type ProductionLineCreateNestedManyWithoutCreatorInput = {
    create?: XOR<ProductionLineCreateWithoutCreatorInput, ProductionLineUncheckedCreateWithoutCreatorInput> | ProductionLineCreateWithoutCreatorInput[] | ProductionLineUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ProductionLineCreateOrConnectWithoutCreatorInput | ProductionLineCreateOrConnectWithoutCreatorInput[]
    createMany?: ProductionLineCreateManyCreatorInputEnvelope
    connect?: ProductionLineWhereUniqueInput | ProductionLineWhereUniqueInput[]
  }

  export type AuditLogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type ProcessVersionUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<ProcessVersionCreateWithoutCreatorInput, ProcessVersionUncheckedCreateWithoutCreatorInput> | ProcessVersionCreateWithoutCreatorInput[] | ProcessVersionUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ProcessVersionCreateOrConnectWithoutCreatorInput | ProcessVersionCreateOrConnectWithoutCreatorInput[]
    createMany?: ProcessVersionCreateManyCreatorInputEnvelope
    connect?: ProcessVersionWhereUniqueInput | ProcessVersionWhereUniqueInput[]
  }

  export type ProcessUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<ProcessCreateWithoutCreatorInput, ProcessUncheckedCreateWithoutCreatorInput> | ProcessCreateWithoutCreatorInput[] | ProcessUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ProcessCreateOrConnectWithoutCreatorInput | ProcessCreateOrConnectWithoutCreatorInput[]
    createMany?: ProcessCreateManyCreatorInputEnvelope
    connect?: ProcessWhereUniqueInput | ProcessWhereUniqueInput[]
  }

  export type ProductionLineVersionUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<ProductionLineVersionCreateWithoutCreatorInput, ProductionLineVersionUncheckedCreateWithoutCreatorInput> | ProductionLineVersionCreateWithoutCreatorInput[] | ProductionLineVersionUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ProductionLineVersionCreateOrConnectWithoutCreatorInput | ProductionLineVersionCreateOrConnectWithoutCreatorInput[]
    createMany?: ProductionLineVersionCreateManyCreatorInputEnvelope
    connect?: ProductionLineVersionWhereUniqueInput | ProductionLineVersionWhereUniqueInput[]
  }

  export type ProductionLineUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<ProductionLineCreateWithoutCreatorInput, ProductionLineUncheckedCreateWithoutCreatorInput> | ProductionLineCreateWithoutCreatorInput[] | ProductionLineUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ProductionLineCreateOrConnectWithoutCreatorInput | ProductionLineCreateOrConnectWithoutCreatorInput[]
    createMany?: ProductionLineCreateManyCreatorInputEnvelope
    connect?: ProductionLineWhereUniqueInput | ProductionLineWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type AuditLogUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutUserInput | AuditLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutUserInput | AuditLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutUserInput | AuditLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type ProcessVersionUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<ProcessVersionCreateWithoutCreatorInput, ProcessVersionUncheckedCreateWithoutCreatorInput> | ProcessVersionCreateWithoutCreatorInput[] | ProcessVersionUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ProcessVersionCreateOrConnectWithoutCreatorInput | ProcessVersionCreateOrConnectWithoutCreatorInput[]
    upsert?: ProcessVersionUpsertWithWhereUniqueWithoutCreatorInput | ProcessVersionUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: ProcessVersionCreateManyCreatorInputEnvelope
    set?: ProcessVersionWhereUniqueInput | ProcessVersionWhereUniqueInput[]
    disconnect?: ProcessVersionWhereUniqueInput | ProcessVersionWhereUniqueInput[]
    delete?: ProcessVersionWhereUniqueInput | ProcessVersionWhereUniqueInput[]
    connect?: ProcessVersionWhereUniqueInput | ProcessVersionWhereUniqueInput[]
    update?: ProcessVersionUpdateWithWhereUniqueWithoutCreatorInput | ProcessVersionUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: ProcessVersionUpdateManyWithWhereWithoutCreatorInput | ProcessVersionUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: ProcessVersionScalarWhereInput | ProcessVersionScalarWhereInput[]
  }

  export type ProcessUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<ProcessCreateWithoutCreatorInput, ProcessUncheckedCreateWithoutCreatorInput> | ProcessCreateWithoutCreatorInput[] | ProcessUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ProcessCreateOrConnectWithoutCreatorInput | ProcessCreateOrConnectWithoutCreatorInput[]
    upsert?: ProcessUpsertWithWhereUniqueWithoutCreatorInput | ProcessUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: ProcessCreateManyCreatorInputEnvelope
    set?: ProcessWhereUniqueInput | ProcessWhereUniqueInput[]
    disconnect?: ProcessWhereUniqueInput | ProcessWhereUniqueInput[]
    delete?: ProcessWhereUniqueInput | ProcessWhereUniqueInput[]
    connect?: ProcessWhereUniqueInput | ProcessWhereUniqueInput[]
    update?: ProcessUpdateWithWhereUniqueWithoutCreatorInput | ProcessUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: ProcessUpdateManyWithWhereWithoutCreatorInput | ProcessUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: ProcessScalarWhereInput | ProcessScalarWhereInput[]
  }

  export type ProductionLineVersionUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<ProductionLineVersionCreateWithoutCreatorInput, ProductionLineVersionUncheckedCreateWithoutCreatorInput> | ProductionLineVersionCreateWithoutCreatorInput[] | ProductionLineVersionUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ProductionLineVersionCreateOrConnectWithoutCreatorInput | ProductionLineVersionCreateOrConnectWithoutCreatorInput[]
    upsert?: ProductionLineVersionUpsertWithWhereUniqueWithoutCreatorInput | ProductionLineVersionUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: ProductionLineVersionCreateManyCreatorInputEnvelope
    set?: ProductionLineVersionWhereUniqueInput | ProductionLineVersionWhereUniqueInput[]
    disconnect?: ProductionLineVersionWhereUniqueInput | ProductionLineVersionWhereUniqueInput[]
    delete?: ProductionLineVersionWhereUniqueInput | ProductionLineVersionWhereUniqueInput[]
    connect?: ProductionLineVersionWhereUniqueInput | ProductionLineVersionWhereUniqueInput[]
    update?: ProductionLineVersionUpdateWithWhereUniqueWithoutCreatorInput | ProductionLineVersionUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: ProductionLineVersionUpdateManyWithWhereWithoutCreatorInput | ProductionLineVersionUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: ProductionLineVersionScalarWhereInput | ProductionLineVersionScalarWhereInput[]
  }

  export type ProductionLineUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<ProductionLineCreateWithoutCreatorInput, ProductionLineUncheckedCreateWithoutCreatorInput> | ProductionLineCreateWithoutCreatorInput[] | ProductionLineUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ProductionLineCreateOrConnectWithoutCreatorInput | ProductionLineCreateOrConnectWithoutCreatorInput[]
    upsert?: ProductionLineUpsertWithWhereUniqueWithoutCreatorInput | ProductionLineUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: ProductionLineCreateManyCreatorInputEnvelope
    set?: ProductionLineWhereUniqueInput | ProductionLineWhereUniqueInput[]
    disconnect?: ProductionLineWhereUniqueInput | ProductionLineWhereUniqueInput[]
    delete?: ProductionLineWhereUniqueInput | ProductionLineWhereUniqueInput[]
    connect?: ProductionLineWhereUniqueInput | ProductionLineWhereUniqueInput[]
    update?: ProductionLineUpdateWithWhereUniqueWithoutCreatorInput | ProductionLineUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: ProductionLineUpdateManyWithWhereWithoutCreatorInput | ProductionLineUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: ProductionLineScalarWhereInput | ProductionLineScalarWhereInput[]
  }

  export type AuditLogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutUserInput | AuditLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutUserInput | AuditLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutUserInput | AuditLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type ProcessVersionUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<ProcessVersionCreateWithoutCreatorInput, ProcessVersionUncheckedCreateWithoutCreatorInput> | ProcessVersionCreateWithoutCreatorInput[] | ProcessVersionUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ProcessVersionCreateOrConnectWithoutCreatorInput | ProcessVersionCreateOrConnectWithoutCreatorInput[]
    upsert?: ProcessVersionUpsertWithWhereUniqueWithoutCreatorInput | ProcessVersionUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: ProcessVersionCreateManyCreatorInputEnvelope
    set?: ProcessVersionWhereUniqueInput | ProcessVersionWhereUniqueInput[]
    disconnect?: ProcessVersionWhereUniqueInput | ProcessVersionWhereUniqueInput[]
    delete?: ProcessVersionWhereUniqueInput | ProcessVersionWhereUniqueInput[]
    connect?: ProcessVersionWhereUniqueInput | ProcessVersionWhereUniqueInput[]
    update?: ProcessVersionUpdateWithWhereUniqueWithoutCreatorInput | ProcessVersionUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: ProcessVersionUpdateManyWithWhereWithoutCreatorInput | ProcessVersionUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: ProcessVersionScalarWhereInput | ProcessVersionScalarWhereInput[]
  }

  export type ProcessUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<ProcessCreateWithoutCreatorInput, ProcessUncheckedCreateWithoutCreatorInput> | ProcessCreateWithoutCreatorInput[] | ProcessUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ProcessCreateOrConnectWithoutCreatorInput | ProcessCreateOrConnectWithoutCreatorInput[]
    upsert?: ProcessUpsertWithWhereUniqueWithoutCreatorInput | ProcessUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: ProcessCreateManyCreatorInputEnvelope
    set?: ProcessWhereUniqueInput | ProcessWhereUniqueInput[]
    disconnect?: ProcessWhereUniqueInput | ProcessWhereUniqueInput[]
    delete?: ProcessWhereUniqueInput | ProcessWhereUniqueInput[]
    connect?: ProcessWhereUniqueInput | ProcessWhereUniqueInput[]
    update?: ProcessUpdateWithWhereUniqueWithoutCreatorInput | ProcessUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: ProcessUpdateManyWithWhereWithoutCreatorInput | ProcessUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: ProcessScalarWhereInput | ProcessScalarWhereInput[]
  }

  export type ProductionLineVersionUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<ProductionLineVersionCreateWithoutCreatorInput, ProductionLineVersionUncheckedCreateWithoutCreatorInput> | ProductionLineVersionCreateWithoutCreatorInput[] | ProductionLineVersionUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ProductionLineVersionCreateOrConnectWithoutCreatorInput | ProductionLineVersionCreateOrConnectWithoutCreatorInput[]
    upsert?: ProductionLineVersionUpsertWithWhereUniqueWithoutCreatorInput | ProductionLineVersionUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: ProductionLineVersionCreateManyCreatorInputEnvelope
    set?: ProductionLineVersionWhereUniqueInput | ProductionLineVersionWhereUniqueInput[]
    disconnect?: ProductionLineVersionWhereUniqueInput | ProductionLineVersionWhereUniqueInput[]
    delete?: ProductionLineVersionWhereUniqueInput | ProductionLineVersionWhereUniqueInput[]
    connect?: ProductionLineVersionWhereUniqueInput | ProductionLineVersionWhereUniqueInput[]
    update?: ProductionLineVersionUpdateWithWhereUniqueWithoutCreatorInput | ProductionLineVersionUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: ProductionLineVersionUpdateManyWithWhereWithoutCreatorInput | ProductionLineVersionUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: ProductionLineVersionScalarWhereInput | ProductionLineVersionScalarWhereInput[]
  }

  export type ProductionLineUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<ProductionLineCreateWithoutCreatorInput, ProductionLineUncheckedCreateWithoutCreatorInput> | ProductionLineCreateWithoutCreatorInput[] | ProductionLineUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ProductionLineCreateOrConnectWithoutCreatorInput | ProductionLineCreateOrConnectWithoutCreatorInput[]
    upsert?: ProductionLineUpsertWithWhereUniqueWithoutCreatorInput | ProductionLineUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: ProductionLineCreateManyCreatorInputEnvelope
    set?: ProductionLineWhereUniqueInput | ProductionLineWhereUniqueInput[]
    disconnect?: ProductionLineWhereUniqueInput | ProductionLineWhereUniqueInput[]
    delete?: ProductionLineWhereUniqueInput | ProductionLineWhereUniqueInput[]
    connect?: ProductionLineWhereUniqueInput | ProductionLineWhereUniqueInput[]
    update?: ProductionLineUpdateWithWhereUniqueWithoutCreatorInput | ProductionLineUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: ProductionLineUpdateManyWithWhereWithoutCreatorInput | ProductionLineUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: ProductionLineScalarWhereInput | ProductionLineScalarWhereInput[]
  }

  export type ProcessCreateNestedManyWithoutProductionLineInput = {
    create?: XOR<ProcessCreateWithoutProductionLineInput, ProcessUncheckedCreateWithoutProductionLineInput> | ProcessCreateWithoutProductionLineInput[] | ProcessUncheckedCreateWithoutProductionLineInput[]
    connectOrCreate?: ProcessCreateOrConnectWithoutProductionLineInput | ProcessCreateOrConnectWithoutProductionLineInput[]
    createMany?: ProcessCreateManyProductionLineInputEnvelope
    connect?: ProcessWhereUniqueInput | ProcessWhereUniqueInput[]
  }

  export type ProductionLineVersionCreateNestedManyWithoutEntityInput = {
    create?: XOR<ProductionLineVersionCreateWithoutEntityInput, ProductionLineVersionUncheckedCreateWithoutEntityInput> | ProductionLineVersionCreateWithoutEntityInput[] | ProductionLineVersionUncheckedCreateWithoutEntityInput[]
    connectOrCreate?: ProductionLineVersionCreateOrConnectWithoutEntityInput | ProductionLineVersionCreateOrConnectWithoutEntityInput[]
    createMany?: ProductionLineVersionCreateManyEntityInputEnvelope
    connect?: ProductionLineVersionWhereUniqueInput | ProductionLineVersionWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutCreatedProductionLinesInput = {
    create?: XOR<UserCreateWithoutCreatedProductionLinesInput, UserUncheckedCreateWithoutCreatedProductionLinesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedProductionLinesInput
    connect?: UserWhereUniqueInput
  }

  export type ProcessUncheckedCreateNestedManyWithoutProductionLineInput = {
    create?: XOR<ProcessCreateWithoutProductionLineInput, ProcessUncheckedCreateWithoutProductionLineInput> | ProcessCreateWithoutProductionLineInput[] | ProcessUncheckedCreateWithoutProductionLineInput[]
    connectOrCreate?: ProcessCreateOrConnectWithoutProductionLineInput | ProcessCreateOrConnectWithoutProductionLineInput[]
    createMany?: ProcessCreateManyProductionLineInputEnvelope
    connect?: ProcessWhereUniqueInput | ProcessWhereUniqueInput[]
  }

  export type ProductionLineVersionUncheckedCreateNestedManyWithoutEntityInput = {
    create?: XOR<ProductionLineVersionCreateWithoutEntityInput, ProductionLineVersionUncheckedCreateWithoutEntityInput> | ProductionLineVersionCreateWithoutEntityInput[] | ProductionLineVersionUncheckedCreateWithoutEntityInput[]
    connectOrCreate?: ProductionLineVersionCreateOrConnectWithoutEntityInput | ProductionLineVersionCreateOrConnectWithoutEntityInput[]
    createMany?: ProductionLineVersionCreateManyEntityInputEnvelope
    connect?: ProductionLineVersionWhereUniqueInput | ProductionLineVersionWhereUniqueInput[]
  }

  export type EnumProductionLineStatusFieldUpdateOperationsInput = {
    set?: $Enums.ProductionLineStatus
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ProcessUpdateManyWithoutProductionLineNestedInput = {
    create?: XOR<ProcessCreateWithoutProductionLineInput, ProcessUncheckedCreateWithoutProductionLineInput> | ProcessCreateWithoutProductionLineInput[] | ProcessUncheckedCreateWithoutProductionLineInput[]
    connectOrCreate?: ProcessCreateOrConnectWithoutProductionLineInput | ProcessCreateOrConnectWithoutProductionLineInput[]
    upsert?: ProcessUpsertWithWhereUniqueWithoutProductionLineInput | ProcessUpsertWithWhereUniqueWithoutProductionLineInput[]
    createMany?: ProcessCreateManyProductionLineInputEnvelope
    set?: ProcessWhereUniqueInput | ProcessWhereUniqueInput[]
    disconnect?: ProcessWhereUniqueInput | ProcessWhereUniqueInput[]
    delete?: ProcessWhereUniqueInput | ProcessWhereUniqueInput[]
    connect?: ProcessWhereUniqueInput | ProcessWhereUniqueInput[]
    update?: ProcessUpdateWithWhereUniqueWithoutProductionLineInput | ProcessUpdateWithWhereUniqueWithoutProductionLineInput[]
    updateMany?: ProcessUpdateManyWithWhereWithoutProductionLineInput | ProcessUpdateManyWithWhereWithoutProductionLineInput[]
    deleteMany?: ProcessScalarWhereInput | ProcessScalarWhereInput[]
  }

  export type ProductionLineVersionUpdateManyWithoutEntityNestedInput = {
    create?: XOR<ProductionLineVersionCreateWithoutEntityInput, ProductionLineVersionUncheckedCreateWithoutEntityInput> | ProductionLineVersionCreateWithoutEntityInput[] | ProductionLineVersionUncheckedCreateWithoutEntityInput[]
    connectOrCreate?: ProductionLineVersionCreateOrConnectWithoutEntityInput | ProductionLineVersionCreateOrConnectWithoutEntityInput[]
    upsert?: ProductionLineVersionUpsertWithWhereUniqueWithoutEntityInput | ProductionLineVersionUpsertWithWhereUniqueWithoutEntityInput[]
    createMany?: ProductionLineVersionCreateManyEntityInputEnvelope
    set?: ProductionLineVersionWhereUniqueInput | ProductionLineVersionWhereUniqueInput[]
    disconnect?: ProductionLineVersionWhereUniqueInput | ProductionLineVersionWhereUniqueInput[]
    delete?: ProductionLineVersionWhereUniqueInput | ProductionLineVersionWhereUniqueInput[]
    connect?: ProductionLineVersionWhereUniqueInput | ProductionLineVersionWhereUniqueInput[]
    update?: ProductionLineVersionUpdateWithWhereUniqueWithoutEntityInput | ProductionLineVersionUpdateWithWhereUniqueWithoutEntityInput[]
    updateMany?: ProductionLineVersionUpdateManyWithWhereWithoutEntityInput | ProductionLineVersionUpdateManyWithWhereWithoutEntityInput[]
    deleteMany?: ProductionLineVersionScalarWhereInput | ProductionLineVersionScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutCreatedProductionLinesNestedInput = {
    create?: XOR<UserCreateWithoutCreatedProductionLinesInput, UserUncheckedCreateWithoutCreatedProductionLinesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedProductionLinesInput
    upsert?: UserUpsertWithoutCreatedProductionLinesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedProductionLinesInput, UserUpdateWithoutCreatedProductionLinesInput>, UserUncheckedUpdateWithoutCreatedProductionLinesInput>
  }

  export type ProcessUncheckedUpdateManyWithoutProductionLineNestedInput = {
    create?: XOR<ProcessCreateWithoutProductionLineInput, ProcessUncheckedCreateWithoutProductionLineInput> | ProcessCreateWithoutProductionLineInput[] | ProcessUncheckedCreateWithoutProductionLineInput[]
    connectOrCreate?: ProcessCreateOrConnectWithoutProductionLineInput | ProcessCreateOrConnectWithoutProductionLineInput[]
    upsert?: ProcessUpsertWithWhereUniqueWithoutProductionLineInput | ProcessUpsertWithWhereUniqueWithoutProductionLineInput[]
    createMany?: ProcessCreateManyProductionLineInputEnvelope
    set?: ProcessWhereUniqueInput | ProcessWhereUniqueInput[]
    disconnect?: ProcessWhereUniqueInput | ProcessWhereUniqueInput[]
    delete?: ProcessWhereUniqueInput | ProcessWhereUniqueInput[]
    connect?: ProcessWhereUniqueInput | ProcessWhereUniqueInput[]
    update?: ProcessUpdateWithWhereUniqueWithoutProductionLineInput | ProcessUpdateWithWhereUniqueWithoutProductionLineInput[]
    updateMany?: ProcessUpdateManyWithWhereWithoutProductionLineInput | ProcessUpdateManyWithWhereWithoutProductionLineInput[]
    deleteMany?: ProcessScalarWhereInput | ProcessScalarWhereInput[]
  }

  export type ProductionLineVersionUncheckedUpdateManyWithoutEntityNestedInput = {
    create?: XOR<ProductionLineVersionCreateWithoutEntityInput, ProductionLineVersionUncheckedCreateWithoutEntityInput> | ProductionLineVersionCreateWithoutEntityInput[] | ProductionLineVersionUncheckedCreateWithoutEntityInput[]
    connectOrCreate?: ProductionLineVersionCreateOrConnectWithoutEntityInput | ProductionLineVersionCreateOrConnectWithoutEntityInput[]
    upsert?: ProductionLineVersionUpsertWithWhereUniqueWithoutEntityInput | ProductionLineVersionUpsertWithWhereUniqueWithoutEntityInput[]
    createMany?: ProductionLineVersionCreateManyEntityInputEnvelope
    set?: ProductionLineVersionWhereUniqueInput | ProductionLineVersionWhereUniqueInput[]
    disconnect?: ProductionLineVersionWhereUniqueInput | ProductionLineVersionWhereUniqueInput[]
    delete?: ProductionLineVersionWhereUniqueInput | ProductionLineVersionWhereUniqueInput[]
    connect?: ProductionLineVersionWhereUniqueInput | ProductionLineVersionWhereUniqueInput[]
    update?: ProductionLineVersionUpdateWithWhereUniqueWithoutEntityInput | ProductionLineVersionUpdateWithWhereUniqueWithoutEntityInput[]
    updateMany?: ProductionLineVersionUpdateManyWithWhereWithoutEntityInput | ProductionLineVersionUpdateManyWithWhereWithoutEntityInput[]
    deleteMany?: ProductionLineVersionScalarWhereInput | ProductionLineVersionScalarWhereInput[]
  }

  export type ProcessVersionCreateNestedManyWithoutEntityInput = {
    create?: XOR<ProcessVersionCreateWithoutEntityInput, ProcessVersionUncheckedCreateWithoutEntityInput> | ProcessVersionCreateWithoutEntityInput[] | ProcessVersionUncheckedCreateWithoutEntityInput[]
    connectOrCreate?: ProcessVersionCreateOrConnectWithoutEntityInput | ProcessVersionCreateOrConnectWithoutEntityInput[]
    createMany?: ProcessVersionCreateManyEntityInputEnvelope
    connect?: ProcessVersionWhereUniqueInput | ProcessVersionWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutCreatedProcessesInput = {
    create?: XOR<UserCreateWithoutCreatedProcessesInput, UserUncheckedCreateWithoutCreatedProcessesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedProcessesInput
    connect?: UserWhereUniqueInput
  }

  export type ProductionLineCreateNestedOneWithoutProcessesInput = {
    create?: XOR<ProductionLineCreateWithoutProcessesInput, ProductionLineUncheckedCreateWithoutProcessesInput>
    connectOrCreate?: ProductionLineCreateOrConnectWithoutProcessesInput
    connect?: ProductionLineWhereUniqueInput
  }

  export type ProcessVersionUncheckedCreateNestedManyWithoutEntityInput = {
    create?: XOR<ProcessVersionCreateWithoutEntityInput, ProcessVersionUncheckedCreateWithoutEntityInput> | ProcessVersionCreateWithoutEntityInput[] | ProcessVersionUncheckedCreateWithoutEntityInput[]
    connectOrCreate?: ProcessVersionCreateOrConnectWithoutEntityInput | ProcessVersionCreateOrConnectWithoutEntityInput[]
    createMany?: ProcessVersionCreateManyEntityInputEnvelope
    connect?: ProcessVersionWhereUniqueInput | ProcessVersionWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumProcessStatusFieldUpdateOperationsInput = {
    set?: $Enums.ProcessStatus
  }

  export type ProcessVersionUpdateManyWithoutEntityNestedInput = {
    create?: XOR<ProcessVersionCreateWithoutEntityInput, ProcessVersionUncheckedCreateWithoutEntityInput> | ProcessVersionCreateWithoutEntityInput[] | ProcessVersionUncheckedCreateWithoutEntityInput[]
    connectOrCreate?: ProcessVersionCreateOrConnectWithoutEntityInput | ProcessVersionCreateOrConnectWithoutEntityInput[]
    upsert?: ProcessVersionUpsertWithWhereUniqueWithoutEntityInput | ProcessVersionUpsertWithWhereUniqueWithoutEntityInput[]
    createMany?: ProcessVersionCreateManyEntityInputEnvelope
    set?: ProcessVersionWhereUniqueInput | ProcessVersionWhereUniqueInput[]
    disconnect?: ProcessVersionWhereUniqueInput | ProcessVersionWhereUniqueInput[]
    delete?: ProcessVersionWhereUniqueInput | ProcessVersionWhereUniqueInput[]
    connect?: ProcessVersionWhereUniqueInput | ProcessVersionWhereUniqueInput[]
    update?: ProcessVersionUpdateWithWhereUniqueWithoutEntityInput | ProcessVersionUpdateWithWhereUniqueWithoutEntityInput[]
    updateMany?: ProcessVersionUpdateManyWithWhereWithoutEntityInput | ProcessVersionUpdateManyWithWhereWithoutEntityInput[]
    deleteMany?: ProcessVersionScalarWhereInput | ProcessVersionScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutCreatedProcessesNestedInput = {
    create?: XOR<UserCreateWithoutCreatedProcessesInput, UserUncheckedCreateWithoutCreatedProcessesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedProcessesInput
    upsert?: UserUpsertWithoutCreatedProcessesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedProcessesInput, UserUpdateWithoutCreatedProcessesInput>, UserUncheckedUpdateWithoutCreatedProcessesInput>
  }

  export type ProductionLineUpdateOneRequiredWithoutProcessesNestedInput = {
    create?: XOR<ProductionLineCreateWithoutProcessesInput, ProductionLineUncheckedCreateWithoutProcessesInput>
    connectOrCreate?: ProductionLineCreateOrConnectWithoutProcessesInput
    upsert?: ProductionLineUpsertWithoutProcessesInput
    connect?: ProductionLineWhereUniqueInput
    update?: XOR<XOR<ProductionLineUpdateToOneWithWhereWithoutProcessesInput, ProductionLineUpdateWithoutProcessesInput>, ProductionLineUncheckedUpdateWithoutProcessesInput>
  }

  export type ProcessVersionUncheckedUpdateManyWithoutEntityNestedInput = {
    create?: XOR<ProcessVersionCreateWithoutEntityInput, ProcessVersionUncheckedCreateWithoutEntityInput> | ProcessVersionCreateWithoutEntityInput[] | ProcessVersionUncheckedCreateWithoutEntityInput[]
    connectOrCreate?: ProcessVersionCreateOrConnectWithoutEntityInput | ProcessVersionCreateOrConnectWithoutEntityInput[]
    upsert?: ProcessVersionUpsertWithWhereUniqueWithoutEntityInput | ProcessVersionUpsertWithWhereUniqueWithoutEntityInput[]
    createMany?: ProcessVersionCreateManyEntityInputEnvelope
    set?: ProcessVersionWhereUniqueInput | ProcessVersionWhereUniqueInput[]
    disconnect?: ProcessVersionWhereUniqueInput | ProcessVersionWhereUniqueInput[]
    delete?: ProcessVersionWhereUniqueInput | ProcessVersionWhereUniqueInput[]
    connect?: ProcessVersionWhereUniqueInput | ProcessVersionWhereUniqueInput[]
    update?: ProcessVersionUpdateWithWhereUniqueWithoutEntityInput | ProcessVersionUpdateWithWhereUniqueWithoutEntityInput[]
    updateMany?: ProcessVersionUpdateManyWithWhereWithoutEntityInput | ProcessVersionUpdateManyWithWhereWithoutEntityInput[]
    deleteMany?: ProcessVersionScalarWhereInput | ProcessVersionScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutAuditLogsInput = {
    create?: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAuditLogsNestedInput = {
    create?: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogsInput
    upsert?: UserUpsertWithoutAuditLogsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAuditLogsInput, UserUpdateWithoutAuditLogsInput>, UserUncheckedUpdateWithoutAuditLogsInput>
  }

  export type UserCreateNestedOneWithoutProductionLineVersionsCreatedInput = {
    create?: XOR<UserCreateWithoutProductionLineVersionsCreatedInput, UserUncheckedCreateWithoutProductionLineVersionsCreatedInput>
    connectOrCreate?: UserCreateOrConnectWithoutProductionLineVersionsCreatedInput
    connect?: UserWhereUniqueInput
  }

  export type ProductionLineCreateNestedOneWithoutVersionsInput = {
    create?: XOR<ProductionLineCreateWithoutVersionsInput, ProductionLineUncheckedCreateWithoutVersionsInput>
    connectOrCreate?: ProductionLineCreateOrConnectWithoutVersionsInput
    connect?: ProductionLineWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutProductionLineVersionsCreatedNestedInput = {
    create?: XOR<UserCreateWithoutProductionLineVersionsCreatedInput, UserUncheckedCreateWithoutProductionLineVersionsCreatedInput>
    connectOrCreate?: UserCreateOrConnectWithoutProductionLineVersionsCreatedInput
    upsert?: UserUpsertWithoutProductionLineVersionsCreatedInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProductionLineVersionsCreatedInput, UserUpdateWithoutProductionLineVersionsCreatedInput>, UserUncheckedUpdateWithoutProductionLineVersionsCreatedInput>
  }

  export type ProductionLineUpdateOneRequiredWithoutVersionsNestedInput = {
    create?: XOR<ProductionLineCreateWithoutVersionsInput, ProductionLineUncheckedCreateWithoutVersionsInput>
    connectOrCreate?: ProductionLineCreateOrConnectWithoutVersionsInput
    upsert?: ProductionLineUpsertWithoutVersionsInput
    connect?: ProductionLineWhereUniqueInput
    update?: XOR<XOR<ProductionLineUpdateToOneWithWhereWithoutVersionsInput, ProductionLineUpdateWithoutVersionsInput>, ProductionLineUncheckedUpdateWithoutVersionsInput>
  }

  export type UserCreateNestedOneWithoutProcessVersionsCreatedInput = {
    create?: XOR<UserCreateWithoutProcessVersionsCreatedInput, UserUncheckedCreateWithoutProcessVersionsCreatedInput>
    connectOrCreate?: UserCreateOrConnectWithoutProcessVersionsCreatedInput
    connect?: UserWhereUniqueInput
  }

  export type ProcessCreateNestedOneWithoutVersionsInput = {
    create?: XOR<ProcessCreateWithoutVersionsInput, ProcessUncheckedCreateWithoutVersionsInput>
    connectOrCreate?: ProcessCreateOrConnectWithoutVersionsInput
    connect?: ProcessWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutProcessVersionsCreatedNestedInput = {
    create?: XOR<UserCreateWithoutProcessVersionsCreatedInput, UserUncheckedCreateWithoutProcessVersionsCreatedInput>
    connectOrCreate?: UserCreateOrConnectWithoutProcessVersionsCreatedInput
    upsert?: UserUpsertWithoutProcessVersionsCreatedInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProcessVersionsCreatedInput, UserUpdateWithoutProcessVersionsCreatedInput>, UserUncheckedUpdateWithoutProcessVersionsCreatedInput>
  }

  export type ProcessUpdateOneRequiredWithoutVersionsNestedInput = {
    create?: XOR<ProcessCreateWithoutVersionsInput, ProcessUncheckedCreateWithoutVersionsInput>
    connectOrCreate?: ProcessCreateOrConnectWithoutVersionsInput
    upsert?: ProcessUpsertWithoutVersionsInput
    connect?: ProcessWhereUniqueInput
    update?: XOR<XOR<ProcessUpdateToOneWithWhereWithoutVersionsInput, ProcessUpdateWithoutVersionsInput>, ProcessUncheckedUpdateWithoutVersionsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumProductionLineStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ProductionLineStatus | EnumProductionLineStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ProductionLineStatus[] | ListEnumProductionLineStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProductionLineStatus[] | ListEnumProductionLineStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumProductionLineStatusFilter<$PrismaModel> | $Enums.ProductionLineStatus
  }

  export type NestedEnumProductionLineStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProductionLineStatus | EnumProductionLineStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ProductionLineStatus[] | ListEnumProductionLineStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProductionLineStatus[] | ListEnumProductionLineStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumProductionLineStatusWithAggregatesFilter<$PrismaModel> | $Enums.ProductionLineStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProductionLineStatusFilter<$PrismaModel>
    _max?: NestedEnumProductionLineStatusFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumProcessStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ProcessStatus | EnumProcessStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ProcessStatus[] | ListEnumProcessStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProcessStatus[] | ListEnumProcessStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumProcessStatusFilter<$PrismaModel> | $Enums.ProcessStatus
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumProcessStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProcessStatus | EnumProcessStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ProcessStatus[] | ListEnumProcessStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProcessStatus[] | ListEnumProcessStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumProcessStatusWithAggregatesFilter<$PrismaModel> | $Enums.ProcessStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProcessStatusFilter<$PrismaModel>
    _max?: NestedEnumProcessStatusFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type AuditLogCreateWithoutUserInput = {
    id?: string
    action: string
    entityType: string
    entityId: string
    details?: NullableJsonNullValueInput | InputJsonValue
    reason?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type AuditLogUncheckedCreateWithoutUserInput = {
    id?: string
    action: string
    entityType: string
    entityId: string
    details?: NullableJsonNullValueInput | InputJsonValue
    reason?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type AuditLogCreateOrConnectWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    create: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput>
  }

  export type AuditLogCreateManyUserInputEnvelope = {
    data: AuditLogCreateManyUserInput | AuditLogCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ProcessVersionCreateWithoutCreatorInput = {
    id?: string
    version: number
    title: string
    description?: string | null
    duration?: number | null
    progress: number
    status: $Enums.ProcessStatus
    x: number
    y: number
    color: string
    productionLineId: string
    createdAt?: Date | string
    reason: string
    entity: ProcessCreateNestedOneWithoutVersionsInput
  }

  export type ProcessVersionUncheckedCreateWithoutCreatorInput = {
    id?: string
    entityId: string
    version: number
    title: string
    description?: string | null
    duration?: number | null
    progress: number
    status: $Enums.ProcessStatus
    x: number
    y: number
    color: string
    productionLineId: string
    createdAt?: Date | string
    reason: string
  }

  export type ProcessVersionCreateOrConnectWithoutCreatorInput = {
    where: ProcessVersionWhereUniqueInput
    create: XOR<ProcessVersionCreateWithoutCreatorInput, ProcessVersionUncheckedCreateWithoutCreatorInput>
  }

  export type ProcessVersionCreateManyCreatorInputEnvelope = {
    data: ProcessVersionCreateManyCreatorInput | ProcessVersionCreateManyCreatorInput[]
    skipDuplicates?: boolean
  }

  export type ProcessCreateWithoutCreatorInput = {
    id?: string
    title: string
    description?: string | null
    duration?: number | null
    progress?: number
    status?: $Enums.ProcessStatus
    x?: number
    y?: number
    color?: string
    version?: number
    isActive?: boolean
    parentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reason: string
    versions?: ProcessVersionCreateNestedManyWithoutEntityInput
    productionLine: ProductionLineCreateNestedOneWithoutProcessesInput
  }

  export type ProcessUncheckedCreateWithoutCreatorInput = {
    id?: string
    title: string
    description?: string | null
    duration?: number | null
    progress?: number
    status?: $Enums.ProcessStatus
    x?: number
    y?: number
    color?: string
    version?: number
    isActive?: boolean
    parentId?: string | null
    productionLineId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    reason: string
    versions?: ProcessVersionUncheckedCreateNestedManyWithoutEntityInput
  }

  export type ProcessCreateOrConnectWithoutCreatorInput = {
    where: ProcessWhereUniqueInput
    create: XOR<ProcessCreateWithoutCreatorInput, ProcessUncheckedCreateWithoutCreatorInput>
  }

  export type ProcessCreateManyCreatorInputEnvelope = {
    data: ProcessCreateManyCreatorInput | ProcessCreateManyCreatorInput[]
    skipDuplicates?: boolean
  }

  export type ProductionLineVersionCreateWithoutCreatorInput = {
    id?: string
    version: number
    name: string
    status: $Enums.ProductionLineStatus
    createdAt?: Date | string
    reason: string
    entity: ProductionLineCreateNestedOneWithoutVersionsInput
  }

  export type ProductionLineVersionUncheckedCreateWithoutCreatorInput = {
    id?: string
    entityId: string
    version: number
    name: string
    status: $Enums.ProductionLineStatus
    createdAt?: Date | string
    reason: string
  }

  export type ProductionLineVersionCreateOrConnectWithoutCreatorInput = {
    where: ProductionLineVersionWhereUniqueInput
    create: XOR<ProductionLineVersionCreateWithoutCreatorInput, ProductionLineVersionUncheckedCreateWithoutCreatorInput>
  }

  export type ProductionLineVersionCreateManyCreatorInputEnvelope = {
    data: ProductionLineVersionCreateManyCreatorInput | ProductionLineVersionCreateManyCreatorInput[]
    skipDuplicates?: boolean
  }

  export type ProductionLineCreateWithoutCreatorInput = {
    id?: string
    name: string
    status?: $Enums.ProductionLineStatus
    version?: number
    isActive?: boolean
    parentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reason: string
    processes?: ProcessCreateNestedManyWithoutProductionLineInput
    versions?: ProductionLineVersionCreateNestedManyWithoutEntityInput
  }

  export type ProductionLineUncheckedCreateWithoutCreatorInput = {
    id?: string
    name: string
    status?: $Enums.ProductionLineStatus
    version?: number
    isActive?: boolean
    parentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reason: string
    processes?: ProcessUncheckedCreateNestedManyWithoutProductionLineInput
    versions?: ProductionLineVersionUncheckedCreateNestedManyWithoutEntityInput
  }

  export type ProductionLineCreateOrConnectWithoutCreatorInput = {
    where: ProductionLineWhereUniqueInput
    create: XOR<ProductionLineCreateWithoutCreatorInput, ProductionLineUncheckedCreateWithoutCreatorInput>
  }

  export type ProductionLineCreateManyCreatorInputEnvelope = {
    data: ProductionLineCreateManyCreatorInput | ProductionLineCreateManyCreatorInput[]
    skipDuplicates?: boolean
  }

  export type AuditLogUpsertWithWhereUniqueWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    update: XOR<AuditLogUpdateWithoutUserInput, AuditLogUncheckedUpdateWithoutUserInput>
    create: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput>
  }

  export type AuditLogUpdateWithWhereUniqueWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    data: XOR<AuditLogUpdateWithoutUserInput, AuditLogUncheckedUpdateWithoutUserInput>
  }

  export type AuditLogUpdateManyWithWhereWithoutUserInput = {
    where: AuditLogScalarWhereInput
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyWithoutUserInput>
  }

  export type AuditLogScalarWhereInput = {
    AND?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    OR?: AuditLogScalarWhereInput[]
    NOT?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    id?: StringFilter<"AuditLog"> | string
    userId?: StringFilter<"AuditLog"> | string
    action?: StringFilter<"AuditLog"> | string
    entityType?: StringFilter<"AuditLog"> | string
    entityId?: StringFilter<"AuditLog"> | string
    details?: JsonNullableFilter<"AuditLog">
    reason?: StringNullableFilter<"AuditLog"> | string | null
    ipAddress?: StringNullableFilter<"AuditLog"> | string | null
    userAgent?: StringNullableFilter<"AuditLog"> | string | null
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
  }

  export type ProcessVersionUpsertWithWhereUniqueWithoutCreatorInput = {
    where: ProcessVersionWhereUniqueInput
    update: XOR<ProcessVersionUpdateWithoutCreatorInput, ProcessVersionUncheckedUpdateWithoutCreatorInput>
    create: XOR<ProcessVersionCreateWithoutCreatorInput, ProcessVersionUncheckedCreateWithoutCreatorInput>
  }

  export type ProcessVersionUpdateWithWhereUniqueWithoutCreatorInput = {
    where: ProcessVersionWhereUniqueInput
    data: XOR<ProcessVersionUpdateWithoutCreatorInput, ProcessVersionUncheckedUpdateWithoutCreatorInput>
  }

  export type ProcessVersionUpdateManyWithWhereWithoutCreatorInput = {
    where: ProcessVersionScalarWhereInput
    data: XOR<ProcessVersionUpdateManyMutationInput, ProcessVersionUncheckedUpdateManyWithoutCreatorInput>
  }

  export type ProcessVersionScalarWhereInput = {
    AND?: ProcessVersionScalarWhereInput | ProcessVersionScalarWhereInput[]
    OR?: ProcessVersionScalarWhereInput[]
    NOT?: ProcessVersionScalarWhereInput | ProcessVersionScalarWhereInput[]
    id?: StringFilter<"ProcessVersion"> | string
    entityId?: StringFilter<"ProcessVersion"> | string
    version?: IntFilter<"ProcessVersion"> | number
    title?: StringFilter<"ProcessVersion"> | string
    description?: StringNullableFilter<"ProcessVersion"> | string | null
    duration?: IntNullableFilter<"ProcessVersion"> | number | null
    progress?: FloatFilter<"ProcessVersion"> | number
    status?: EnumProcessStatusFilter<"ProcessVersion"> | $Enums.ProcessStatus
    x?: FloatFilter<"ProcessVersion"> | number
    y?: FloatFilter<"ProcessVersion"> | number
    color?: StringFilter<"ProcessVersion"> | string
    productionLineId?: StringFilter<"ProcessVersion"> | string
    createdAt?: DateTimeFilter<"ProcessVersion"> | Date | string
    createdBy?: StringFilter<"ProcessVersion"> | string
    reason?: StringFilter<"ProcessVersion"> | string
  }

  export type ProcessUpsertWithWhereUniqueWithoutCreatorInput = {
    where: ProcessWhereUniqueInput
    update: XOR<ProcessUpdateWithoutCreatorInput, ProcessUncheckedUpdateWithoutCreatorInput>
    create: XOR<ProcessCreateWithoutCreatorInput, ProcessUncheckedCreateWithoutCreatorInput>
  }

  export type ProcessUpdateWithWhereUniqueWithoutCreatorInput = {
    where: ProcessWhereUniqueInput
    data: XOR<ProcessUpdateWithoutCreatorInput, ProcessUncheckedUpdateWithoutCreatorInput>
  }

  export type ProcessUpdateManyWithWhereWithoutCreatorInput = {
    where: ProcessScalarWhereInput
    data: XOR<ProcessUpdateManyMutationInput, ProcessUncheckedUpdateManyWithoutCreatorInput>
  }

  export type ProcessScalarWhereInput = {
    AND?: ProcessScalarWhereInput | ProcessScalarWhereInput[]
    OR?: ProcessScalarWhereInput[]
    NOT?: ProcessScalarWhereInput | ProcessScalarWhereInput[]
    id?: StringFilter<"Process"> | string
    title?: StringFilter<"Process"> | string
    description?: StringNullableFilter<"Process"> | string | null
    duration?: IntNullableFilter<"Process"> | number | null
    progress?: FloatFilter<"Process"> | number
    status?: EnumProcessStatusFilter<"Process"> | $Enums.ProcessStatus
    x?: FloatFilter<"Process"> | number
    y?: FloatFilter<"Process"> | number
    color?: StringFilter<"Process"> | string
    version?: IntFilter<"Process"> | number
    isActive?: BoolFilter<"Process"> | boolean
    parentId?: StringNullableFilter<"Process"> | string | null
    productionLineId?: StringFilter<"Process"> | string
    createdAt?: DateTimeFilter<"Process"> | Date | string
    updatedAt?: DateTimeFilter<"Process"> | Date | string
    createdBy?: StringFilter<"Process"> | string
    reason?: StringFilter<"Process"> | string
  }

  export type ProductionLineVersionUpsertWithWhereUniqueWithoutCreatorInput = {
    where: ProductionLineVersionWhereUniqueInput
    update: XOR<ProductionLineVersionUpdateWithoutCreatorInput, ProductionLineVersionUncheckedUpdateWithoutCreatorInput>
    create: XOR<ProductionLineVersionCreateWithoutCreatorInput, ProductionLineVersionUncheckedCreateWithoutCreatorInput>
  }

  export type ProductionLineVersionUpdateWithWhereUniqueWithoutCreatorInput = {
    where: ProductionLineVersionWhereUniqueInput
    data: XOR<ProductionLineVersionUpdateWithoutCreatorInput, ProductionLineVersionUncheckedUpdateWithoutCreatorInput>
  }

  export type ProductionLineVersionUpdateManyWithWhereWithoutCreatorInput = {
    where: ProductionLineVersionScalarWhereInput
    data: XOR<ProductionLineVersionUpdateManyMutationInput, ProductionLineVersionUncheckedUpdateManyWithoutCreatorInput>
  }

  export type ProductionLineVersionScalarWhereInput = {
    AND?: ProductionLineVersionScalarWhereInput | ProductionLineVersionScalarWhereInput[]
    OR?: ProductionLineVersionScalarWhereInput[]
    NOT?: ProductionLineVersionScalarWhereInput | ProductionLineVersionScalarWhereInput[]
    id?: StringFilter<"ProductionLineVersion"> | string
    entityId?: StringFilter<"ProductionLineVersion"> | string
    version?: IntFilter<"ProductionLineVersion"> | number
    name?: StringFilter<"ProductionLineVersion"> | string
    status?: EnumProductionLineStatusFilter<"ProductionLineVersion"> | $Enums.ProductionLineStatus
    createdAt?: DateTimeFilter<"ProductionLineVersion"> | Date | string
    createdBy?: StringFilter<"ProductionLineVersion"> | string
    reason?: StringFilter<"ProductionLineVersion"> | string
  }

  export type ProductionLineUpsertWithWhereUniqueWithoutCreatorInput = {
    where: ProductionLineWhereUniqueInput
    update: XOR<ProductionLineUpdateWithoutCreatorInput, ProductionLineUncheckedUpdateWithoutCreatorInput>
    create: XOR<ProductionLineCreateWithoutCreatorInput, ProductionLineUncheckedCreateWithoutCreatorInput>
  }

  export type ProductionLineUpdateWithWhereUniqueWithoutCreatorInput = {
    where: ProductionLineWhereUniqueInput
    data: XOR<ProductionLineUpdateWithoutCreatorInput, ProductionLineUncheckedUpdateWithoutCreatorInput>
  }

  export type ProductionLineUpdateManyWithWhereWithoutCreatorInput = {
    where: ProductionLineScalarWhereInput
    data: XOR<ProductionLineUpdateManyMutationInput, ProductionLineUncheckedUpdateManyWithoutCreatorInput>
  }

  export type ProductionLineScalarWhereInput = {
    AND?: ProductionLineScalarWhereInput | ProductionLineScalarWhereInput[]
    OR?: ProductionLineScalarWhereInput[]
    NOT?: ProductionLineScalarWhereInput | ProductionLineScalarWhereInput[]
    id?: StringFilter<"ProductionLine"> | string
    name?: StringFilter<"ProductionLine"> | string
    status?: EnumProductionLineStatusFilter<"ProductionLine"> | $Enums.ProductionLineStatus
    version?: IntFilter<"ProductionLine"> | number
    isActive?: BoolFilter<"ProductionLine"> | boolean
    parentId?: StringNullableFilter<"ProductionLine"> | string | null
    createdAt?: DateTimeFilter<"ProductionLine"> | Date | string
    updatedAt?: DateTimeFilter<"ProductionLine"> | Date | string
    createdBy?: StringFilter<"ProductionLine"> | string
    reason?: StringFilter<"ProductionLine"> | string
  }

  export type ProcessCreateWithoutProductionLineInput = {
    id?: string
    title: string
    description?: string | null
    duration?: number | null
    progress?: number
    status?: $Enums.ProcessStatus
    x?: number
    y?: number
    color?: string
    version?: number
    isActive?: boolean
    parentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reason: string
    versions?: ProcessVersionCreateNestedManyWithoutEntityInput
    creator: UserCreateNestedOneWithoutCreatedProcessesInput
  }

  export type ProcessUncheckedCreateWithoutProductionLineInput = {
    id?: string
    title: string
    description?: string | null
    duration?: number | null
    progress?: number
    status?: $Enums.ProcessStatus
    x?: number
    y?: number
    color?: string
    version?: number
    isActive?: boolean
    parentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: string
    reason: string
    versions?: ProcessVersionUncheckedCreateNestedManyWithoutEntityInput
  }

  export type ProcessCreateOrConnectWithoutProductionLineInput = {
    where: ProcessWhereUniqueInput
    create: XOR<ProcessCreateWithoutProductionLineInput, ProcessUncheckedCreateWithoutProductionLineInput>
  }

  export type ProcessCreateManyProductionLineInputEnvelope = {
    data: ProcessCreateManyProductionLineInput | ProcessCreateManyProductionLineInput[]
    skipDuplicates?: boolean
  }

  export type ProductionLineVersionCreateWithoutEntityInput = {
    id?: string
    version: number
    name: string
    status: $Enums.ProductionLineStatus
    createdAt?: Date | string
    reason: string
    creator: UserCreateNestedOneWithoutProductionLineVersionsCreatedInput
  }

  export type ProductionLineVersionUncheckedCreateWithoutEntityInput = {
    id?: string
    version: number
    name: string
    status: $Enums.ProductionLineStatus
    createdAt?: Date | string
    createdBy: string
    reason: string
  }

  export type ProductionLineVersionCreateOrConnectWithoutEntityInput = {
    where: ProductionLineVersionWhereUniqueInput
    create: XOR<ProductionLineVersionCreateWithoutEntityInput, ProductionLineVersionUncheckedCreateWithoutEntityInput>
  }

  export type ProductionLineVersionCreateManyEntityInputEnvelope = {
    data: ProductionLineVersionCreateManyEntityInput | ProductionLineVersionCreateManyEntityInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutCreatedProductionLinesInput = {
    id?: string
    email: string
    password: string
    firstName?: string | null
    lastName?: string | null
    role?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    processVersionsCreated?: ProcessVersionCreateNestedManyWithoutCreatorInput
    createdProcesses?: ProcessCreateNestedManyWithoutCreatorInput
    productionLineVersionsCreated?: ProductionLineVersionCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutCreatedProductionLinesInput = {
    id?: string
    email: string
    password: string
    firstName?: string | null
    lastName?: string | null
    role?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    processVersionsCreated?: ProcessVersionUncheckedCreateNestedManyWithoutCreatorInput
    createdProcesses?: ProcessUncheckedCreateNestedManyWithoutCreatorInput
    productionLineVersionsCreated?: ProductionLineVersionUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutCreatedProductionLinesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedProductionLinesInput, UserUncheckedCreateWithoutCreatedProductionLinesInput>
  }

  export type ProcessUpsertWithWhereUniqueWithoutProductionLineInput = {
    where: ProcessWhereUniqueInput
    update: XOR<ProcessUpdateWithoutProductionLineInput, ProcessUncheckedUpdateWithoutProductionLineInput>
    create: XOR<ProcessCreateWithoutProductionLineInput, ProcessUncheckedCreateWithoutProductionLineInput>
  }

  export type ProcessUpdateWithWhereUniqueWithoutProductionLineInput = {
    where: ProcessWhereUniqueInput
    data: XOR<ProcessUpdateWithoutProductionLineInput, ProcessUncheckedUpdateWithoutProductionLineInput>
  }

  export type ProcessUpdateManyWithWhereWithoutProductionLineInput = {
    where: ProcessScalarWhereInput
    data: XOR<ProcessUpdateManyMutationInput, ProcessUncheckedUpdateManyWithoutProductionLineInput>
  }

  export type ProductionLineVersionUpsertWithWhereUniqueWithoutEntityInput = {
    where: ProductionLineVersionWhereUniqueInput
    update: XOR<ProductionLineVersionUpdateWithoutEntityInput, ProductionLineVersionUncheckedUpdateWithoutEntityInput>
    create: XOR<ProductionLineVersionCreateWithoutEntityInput, ProductionLineVersionUncheckedCreateWithoutEntityInput>
  }

  export type ProductionLineVersionUpdateWithWhereUniqueWithoutEntityInput = {
    where: ProductionLineVersionWhereUniqueInput
    data: XOR<ProductionLineVersionUpdateWithoutEntityInput, ProductionLineVersionUncheckedUpdateWithoutEntityInput>
  }

  export type ProductionLineVersionUpdateManyWithWhereWithoutEntityInput = {
    where: ProductionLineVersionScalarWhereInput
    data: XOR<ProductionLineVersionUpdateManyMutationInput, ProductionLineVersionUncheckedUpdateManyWithoutEntityInput>
  }

  export type UserUpsertWithoutCreatedProductionLinesInput = {
    update: XOR<UserUpdateWithoutCreatedProductionLinesInput, UserUncheckedUpdateWithoutCreatedProductionLinesInput>
    create: XOR<UserCreateWithoutCreatedProductionLinesInput, UserUncheckedCreateWithoutCreatedProductionLinesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedProductionLinesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedProductionLinesInput, UserUncheckedUpdateWithoutCreatedProductionLinesInput>
  }

  export type UserUpdateWithoutCreatedProductionLinesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    processVersionsCreated?: ProcessVersionUpdateManyWithoutCreatorNestedInput
    createdProcesses?: ProcessUpdateManyWithoutCreatorNestedInput
    productionLineVersionsCreated?: ProductionLineVersionUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedProductionLinesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    processVersionsCreated?: ProcessVersionUncheckedUpdateManyWithoutCreatorNestedInput
    createdProcesses?: ProcessUncheckedUpdateManyWithoutCreatorNestedInput
    productionLineVersionsCreated?: ProductionLineVersionUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type ProcessVersionCreateWithoutEntityInput = {
    id?: string
    version: number
    title: string
    description?: string | null
    duration?: number | null
    progress: number
    status: $Enums.ProcessStatus
    x: number
    y: number
    color: string
    productionLineId: string
    createdAt?: Date | string
    reason: string
    creator: UserCreateNestedOneWithoutProcessVersionsCreatedInput
  }

  export type ProcessVersionUncheckedCreateWithoutEntityInput = {
    id?: string
    version: number
    title: string
    description?: string | null
    duration?: number | null
    progress: number
    status: $Enums.ProcessStatus
    x: number
    y: number
    color: string
    productionLineId: string
    createdAt?: Date | string
    createdBy: string
    reason: string
  }

  export type ProcessVersionCreateOrConnectWithoutEntityInput = {
    where: ProcessVersionWhereUniqueInput
    create: XOR<ProcessVersionCreateWithoutEntityInput, ProcessVersionUncheckedCreateWithoutEntityInput>
  }

  export type ProcessVersionCreateManyEntityInputEnvelope = {
    data: ProcessVersionCreateManyEntityInput | ProcessVersionCreateManyEntityInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutCreatedProcessesInput = {
    id?: string
    email: string
    password: string
    firstName?: string | null
    lastName?: string | null
    role?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    processVersionsCreated?: ProcessVersionCreateNestedManyWithoutCreatorInput
    productionLineVersionsCreated?: ProductionLineVersionCreateNestedManyWithoutCreatorInput
    createdProductionLines?: ProductionLineCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutCreatedProcessesInput = {
    id?: string
    email: string
    password: string
    firstName?: string | null
    lastName?: string | null
    role?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    processVersionsCreated?: ProcessVersionUncheckedCreateNestedManyWithoutCreatorInput
    productionLineVersionsCreated?: ProductionLineVersionUncheckedCreateNestedManyWithoutCreatorInput
    createdProductionLines?: ProductionLineUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutCreatedProcessesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedProcessesInput, UserUncheckedCreateWithoutCreatedProcessesInput>
  }

  export type ProductionLineCreateWithoutProcessesInput = {
    id?: string
    name: string
    status?: $Enums.ProductionLineStatus
    version?: number
    isActive?: boolean
    parentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reason: string
    versions?: ProductionLineVersionCreateNestedManyWithoutEntityInput
    creator: UserCreateNestedOneWithoutCreatedProductionLinesInput
  }

  export type ProductionLineUncheckedCreateWithoutProcessesInput = {
    id?: string
    name: string
    status?: $Enums.ProductionLineStatus
    version?: number
    isActive?: boolean
    parentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: string
    reason: string
    versions?: ProductionLineVersionUncheckedCreateNestedManyWithoutEntityInput
  }

  export type ProductionLineCreateOrConnectWithoutProcessesInput = {
    where: ProductionLineWhereUniqueInput
    create: XOR<ProductionLineCreateWithoutProcessesInput, ProductionLineUncheckedCreateWithoutProcessesInput>
  }

  export type ProcessVersionUpsertWithWhereUniqueWithoutEntityInput = {
    where: ProcessVersionWhereUniqueInput
    update: XOR<ProcessVersionUpdateWithoutEntityInput, ProcessVersionUncheckedUpdateWithoutEntityInput>
    create: XOR<ProcessVersionCreateWithoutEntityInput, ProcessVersionUncheckedCreateWithoutEntityInput>
  }

  export type ProcessVersionUpdateWithWhereUniqueWithoutEntityInput = {
    where: ProcessVersionWhereUniqueInput
    data: XOR<ProcessVersionUpdateWithoutEntityInput, ProcessVersionUncheckedUpdateWithoutEntityInput>
  }

  export type ProcessVersionUpdateManyWithWhereWithoutEntityInput = {
    where: ProcessVersionScalarWhereInput
    data: XOR<ProcessVersionUpdateManyMutationInput, ProcessVersionUncheckedUpdateManyWithoutEntityInput>
  }

  export type UserUpsertWithoutCreatedProcessesInput = {
    update: XOR<UserUpdateWithoutCreatedProcessesInput, UserUncheckedUpdateWithoutCreatedProcessesInput>
    create: XOR<UserCreateWithoutCreatedProcessesInput, UserUncheckedCreateWithoutCreatedProcessesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedProcessesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedProcessesInput, UserUncheckedUpdateWithoutCreatedProcessesInput>
  }

  export type UserUpdateWithoutCreatedProcessesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    processVersionsCreated?: ProcessVersionUpdateManyWithoutCreatorNestedInput
    productionLineVersionsCreated?: ProductionLineVersionUpdateManyWithoutCreatorNestedInput
    createdProductionLines?: ProductionLineUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedProcessesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    processVersionsCreated?: ProcessVersionUncheckedUpdateManyWithoutCreatorNestedInput
    productionLineVersionsCreated?: ProductionLineVersionUncheckedUpdateManyWithoutCreatorNestedInput
    createdProductionLines?: ProductionLineUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type ProductionLineUpsertWithoutProcessesInput = {
    update: XOR<ProductionLineUpdateWithoutProcessesInput, ProductionLineUncheckedUpdateWithoutProcessesInput>
    create: XOR<ProductionLineCreateWithoutProcessesInput, ProductionLineUncheckedCreateWithoutProcessesInput>
    where?: ProductionLineWhereInput
  }

  export type ProductionLineUpdateToOneWithWhereWithoutProcessesInput = {
    where?: ProductionLineWhereInput
    data: XOR<ProductionLineUpdateWithoutProcessesInput, ProductionLineUncheckedUpdateWithoutProcessesInput>
  }

  export type ProductionLineUpdateWithoutProcessesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumProductionLineStatusFieldUpdateOperationsInput | $Enums.ProductionLineStatus
    version?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: StringFieldUpdateOperationsInput | string
    versions?: ProductionLineVersionUpdateManyWithoutEntityNestedInput
    creator?: UserUpdateOneRequiredWithoutCreatedProductionLinesNestedInput
  }

  export type ProductionLineUncheckedUpdateWithoutProcessesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumProductionLineStatusFieldUpdateOperationsInput | $Enums.ProductionLineStatus
    version?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    versions?: ProductionLineVersionUncheckedUpdateManyWithoutEntityNestedInput
  }

  export type UserCreateWithoutAuditLogsInput = {
    id?: string
    email: string
    password: string
    firstName?: string | null
    lastName?: string | null
    role?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    processVersionsCreated?: ProcessVersionCreateNestedManyWithoutCreatorInput
    createdProcesses?: ProcessCreateNestedManyWithoutCreatorInput
    productionLineVersionsCreated?: ProductionLineVersionCreateNestedManyWithoutCreatorInput
    createdProductionLines?: ProductionLineCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutAuditLogsInput = {
    id?: string
    email: string
    password: string
    firstName?: string | null
    lastName?: string | null
    role?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    processVersionsCreated?: ProcessVersionUncheckedCreateNestedManyWithoutCreatorInput
    createdProcesses?: ProcessUncheckedCreateNestedManyWithoutCreatorInput
    productionLineVersionsCreated?: ProductionLineVersionUncheckedCreateNestedManyWithoutCreatorInput
    createdProductionLines?: ProductionLineUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutAuditLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
  }

  export type UserUpsertWithoutAuditLogsInput = {
    update: XOR<UserUpdateWithoutAuditLogsInput, UserUncheckedUpdateWithoutAuditLogsInput>
    create: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAuditLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAuditLogsInput, UserUncheckedUpdateWithoutAuditLogsInput>
  }

  export type UserUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    processVersionsCreated?: ProcessVersionUpdateManyWithoutCreatorNestedInput
    createdProcesses?: ProcessUpdateManyWithoutCreatorNestedInput
    productionLineVersionsCreated?: ProductionLineVersionUpdateManyWithoutCreatorNestedInput
    createdProductionLines?: ProductionLineUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    processVersionsCreated?: ProcessVersionUncheckedUpdateManyWithoutCreatorNestedInput
    createdProcesses?: ProcessUncheckedUpdateManyWithoutCreatorNestedInput
    productionLineVersionsCreated?: ProductionLineVersionUncheckedUpdateManyWithoutCreatorNestedInput
    createdProductionLines?: ProductionLineUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type UserCreateWithoutProductionLineVersionsCreatedInput = {
    id?: string
    email: string
    password: string
    firstName?: string | null
    lastName?: string | null
    role?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    processVersionsCreated?: ProcessVersionCreateNestedManyWithoutCreatorInput
    createdProcesses?: ProcessCreateNestedManyWithoutCreatorInput
    createdProductionLines?: ProductionLineCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutProductionLineVersionsCreatedInput = {
    id?: string
    email: string
    password: string
    firstName?: string | null
    lastName?: string | null
    role?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    processVersionsCreated?: ProcessVersionUncheckedCreateNestedManyWithoutCreatorInput
    createdProcesses?: ProcessUncheckedCreateNestedManyWithoutCreatorInput
    createdProductionLines?: ProductionLineUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutProductionLineVersionsCreatedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProductionLineVersionsCreatedInput, UserUncheckedCreateWithoutProductionLineVersionsCreatedInput>
  }

  export type ProductionLineCreateWithoutVersionsInput = {
    id?: string
    name: string
    status?: $Enums.ProductionLineStatus
    version?: number
    isActive?: boolean
    parentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reason: string
    processes?: ProcessCreateNestedManyWithoutProductionLineInput
    creator: UserCreateNestedOneWithoutCreatedProductionLinesInput
  }

  export type ProductionLineUncheckedCreateWithoutVersionsInput = {
    id?: string
    name: string
    status?: $Enums.ProductionLineStatus
    version?: number
    isActive?: boolean
    parentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: string
    reason: string
    processes?: ProcessUncheckedCreateNestedManyWithoutProductionLineInput
  }

  export type ProductionLineCreateOrConnectWithoutVersionsInput = {
    where: ProductionLineWhereUniqueInput
    create: XOR<ProductionLineCreateWithoutVersionsInput, ProductionLineUncheckedCreateWithoutVersionsInput>
  }

  export type UserUpsertWithoutProductionLineVersionsCreatedInput = {
    update: XOR<UserUpdateWithoutProductionLineVersionsCreatedInput, UserUncheckedUpdateWithoutProductionLineVersionsCreatedInput>
    create: XOR<UserCreateWithoutProductionLineVersionsCreatedInput, UserUncheckedCreateWithoutProductionLineVersionsCreatedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProductionLineVersionsCreatedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProductionLineVersionsCreatedInput, UserUncheckedUpdateWithoutProductionLineVersionsCreatedInput>
  }

  export type UserUpdateWithoutProductionLineVersionsCreatedInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    processVersionsCreated?: ProcessVersionUpdateManyWithoutCreatorNestedInput
    createdProcesses?: ProcessUpdateManyWithoutCreatorNestedInput
    createdProductionLines?: ProductionLineUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutProductionLineVersionsCreatedInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    processVersionsCreated?: ProcessVersionUncheckedUpdateManyWithoutCreatorNestedInput
    createdProcesses?: ProcessUncheckedUpdateManyWithoutCreatorNestedInput
    createdProductionLines?: ProductionLineUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type ProductionLineUpsertWithoutVersionsInput = {
    update: XOR<ProductionLineUpdateWithoutVersionsInput, ProductionLineUncheckedUpdateWithoutVersionsInput>
    create: XOR<ProductionLineCreateWithoutVersionsInput, ProductionLineUncheckedCreateWithoutVersionsInput>
    where?: ProductionLineWhereInput
  }

  export type ProductionLineUpdateToOneWithWhereWithoutVersionsInput = {
    where?: ProductionLineWhereInput
    data: XOR<ProductionLineUpdateWithoutVersionsInput, ProductionLineUncheckedUpdateWithoutVersionsInput>
  }

  export type ProductionLineUpdateWithoutVersionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumProductionLineStatusFieldUpdateOperationsInput | $Enums.ProductionLineStatus
    version?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: StringFieldUpdateOperationsInput | string
    processes?: ProcessUpdateManyWithoutProductionLineNestedInput
    creator?: UserUpdateOneRequiredWithoutCreatedProductionLinesNestedInput
  }

  export type ProductionLineUncheckedUpdateWithoutVersionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumProductionLineStatusFieldUpdateOperationsInput | $Enums.ProductionLineStatus
    version?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    processes?: ProcessUncheckedUpdateManyWithoutProductionLineNestedInput
  }

  export type UserCreateWithoutProcessVersionsCreatedInput = {
    id?: string
    email: string
    password: string
    firstName?: string | null
    lastName?: string | null
    role?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    createdProcesses?: ProcessCreateNestedManyWithoutCreatorInput
    productionLineVersionsCreated?: ProductionLineVersionCreateNestedManyWithoutCreatorInput
    createdProductionLines?: ProductionLineCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutProcessVersionsCreatedInput = {
    id?: string
    email: string
    password: string
    firstName?: string | null
    lastName?: string | null
    role?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    createdProcesses?: ProcessUncheckedCreateNestedManyWithoutCreatorInput
    productionLineVersionsCreated?: ProductionLineVersionUncheckedCreateNestedManyWithoutCreatorInput
    createdProductionLines?: ProductionLineUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutProcessVersionsCreatedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProcessVersionsCreatedInput, UserUncheckedCreateWithoutProcessVersionsCreatedInput>
  }

  export type ProcessCreateWithoutVersionsInput = {
    id?: string
    title: string
    description?: string | null
    duration?: number | null
    progress?: number
    status?: $Enums.ProcessStatus
    x?: number
    y?: number
    color?: string
    version?: number
    isActive?: boolean
    parentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reason: string
    creator: UserCreateNestedOneWithoutCreatedProcessesInput
    productionLine: ProductionLineCreateNestedOneWithoutProcessesInput
  }

  export type ProcessUncheckedCreateWithoutVersionsInput = {
    id?: string
    title: string
    description?: string | null
    duration?: number | null
    progress?: number
    status?: $Enums.ProcessStatus
    x?: number
    y?: number
    color?: string
    version?: number
    isActive?: boolean
    parentId?: string | null
    productionLineId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: string
    reason: string
  }

  export type ProcessCreateOrConnectWithoutVersionsInput = {
    where: ProcessWhereUniqueInput
    create: XOR<ProcessCreateWithoutVersionsInput, ProcessUncheckedCreateWithoutVersionsInput>
  }

  export type UserUpsertWithoutProcessVersionsCreatedInput = {
    update: XOR<UserUpdateWithoutProcessVersionsCreatedInput, UserUncheckedUpdateWithoutProcessVersionsCreatedInput>
    create: XOR<UserCreateWithoutProcessVersionsCreatedInput, UserUncheckedCreateWithoutProcessVersionsCreatedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProcessVersionsCreatedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProcessVersionsCreatedInput, UserUncheckedUpdateWithoutProcessVersionsCreatedInput>
  }

  export type UserUpdateWithoutProcessVersionsCreatedInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    createdProcesses?: ProcessUpdateManyWithoutCreatorNestedInput
    productionLineVersionsCreated?: ProductionLineVersionUpdateManyWithoutCreatorNestedInput
    createdProductionLines?: ProductionLineUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutProcessVersionsCreatedInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    createdProcesses?: ProcessUncheckedUpdateManyWithoutCreatorNestedInput
    productionLineVersionsCreated?: ProductionLineVersionUncheckedUpdateManyWithoutCreatorNestedInput
    createdProductionLines?: ProductionLineUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type ProcessUpsertWithoutVersionsInput = {
    update: XOR<ProcessUpdateWithoutVersionsInput, ProcessUncheckedUpdateWithoutVersionsInput>
    create: XOR<ProcessCreateWithoutVersionsInput, ProcessUncheckedCreateWithoutVersionsInput>
    where?: ProcessWhereInput
  }

  export type ProcessUpdateToOneWithWhereWithoutVersionsInput = {
    where?: ProcessWhereInput
    data: XOR<ProcessUpdateWithoutVersionsInput, ProcessUncheckedUpdateWithoutVersionsInput>
  }

  export type ProcessUpdateWithoutVersionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    progress?: FloatFieldUpdateOperationsInput | number
    status?: EnumProcessStatusFieldUpdateOperationsInput | $Enums.ProcessStatus
    x?: FloatFieldUpdateOperationsInput | number
    y?: FloatFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: StringFieldUpdateOperationsInput | string
    creator?: UserUpdateOneRequiredWithoutCreatedProcessesNestedInput
    productionLine?: ProductionLineUpdateOneRequiredWithoutProcessesNestedInput
  }

  export type ProcessUncheckedUpdateWithoutVersionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    progress?: FloatFieldUpdateOperationsInput | number
    status?: EnumProcessStatusFieldUpdateOperationsInput | $Enums.ProcessStatus
    x?: FloatFieldUpdateOperationsInput | number
    y?: FloatFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    productionLineId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
  }

  export type AuditLogCreateManyUserInput = {
    id?: string
    action: string
    entityType: string
    entityId: string
    details?: NullableJsonNullValueInput | InputJsonValue
    reason?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type ProcessVersionCreateManyCreatorInput = {
    id?: string
    entityId: string
    version: number
    title: string
    description?: string | null
    duration?: number | null
    progress: number
    status: $Enums.ProcessStatus
    x: number
    y: number
    color: string
    productionLineId: string
    createdAt?: Date | string
    reason: string
  }

  export type ProcessCreateManyCreatorInput = {
    id?: string
    title: string
    description?: string | null
    duration?: number | null
    progress?: number
    status?: $Enums.ProcessStatus
    x?: number
    y?: number
    color?: string
    version?: number
    isActive?: boolean
    parentId?: string | null
    productionLineId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    reason: string
  }

  export type ProductionLineVersionCreateManyCreatorInput = {
    id?: string
    entityId: string
    version: number
    name: string
    status: $Enums.ProductionLineStatus
    createdAt?: Date | string
    reason: string
  }

  export type ProductionLineCreateManyCreatorInput = {
    id?: string
    name: string
    status?: $Enums.ProductionLineStatus
    version?: number
    isActive?: boolean
    parentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reason: string
  }

  export type AuditLogUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    details?: NullableJsonNullValueInput | InputJsonValue
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    details?: NullableJsonNullValueInput | InputJsonValue
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    details?: NullableJsonNullValueInput | InputJsonValue
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProcessVersionUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    progress?: FloatFieldUpdateOperationsInput | number
    status?: EnumProcessStatusFieldUpdateOperationsInput | $Enums.ProcessStatus
    x?: FloatFieldUpdateOperationsInput | number
    y?: FloatFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    productionLineId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: StringFieldUpdateOperationsInput | string
    entity?: ProcessUpdateOneRequiredWithoutVersionsNestedInput
  }

  export type ProcessVersionUncheckedUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    progress?: FloatFieldUpdateOperationsInput | number
    status?: EnumProcessStatusFieldUpdateOperationsInput | $Enums.ProcessStatus
    x?: FloatFieldUpdateOperationsInput | number
    y?: FloatFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    productionLineId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: StringFieldUpdateOperationsInput | string
  }

  export type ProcessVersionUncheckedUpdateManyWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    progress?: FloatFieldUpdateOperationsInput | number
    status?: EnumProcessStatusFieldUpdateOperationsInput | $Enums.ProcessStatus
    x?: FloatFieldUpdateOperationsInput | number
    y?: FloatFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    productionLineId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: StringFieldUpdateOperationsInput | string
  }

  export type ProcessUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    progress?: FloatFieldUpdateOperationsInput | number
    status?: EnumProcessStatusFieldUpdateOperationsInput | $Enums.ProcessStatus
    x?: FloatFieldUpdateOperationsInput | number
    y?: FloatFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: StringFieldUpdateOperationsInput | string
    versions?: ProcessVersionUpdateManyWithoutEntityNestedInput
    productionLine?: ProductionLineUpdateOneRequiredWithoutProcessesNestedInput
  }

  export type ProcessUncheckedUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    progress?: FloatFieldUpdateOperationsInput | number
    status?: EnumProcessStatusFieldUpdateOperationsInput | $Enums.ProcessStatus
    x?: FloatFieldUpdateOperationsInput | number
    y?: FloatFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    productionLineId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: StringFieldUpdateOperationsInput | string
    versions?: ProcessVersionUncheckedUpdateManyWithoutEntityNestedInput
  }

  export type ProcessUncheckedUpdateManyWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    progress?: FloatFieldUpdateOperationsInput | number
    status?: EnumProcessStatusFieldUpdateOperationsInput | $Enums.ProcessStatus
    x?: FloatFieldUpdateOperationsInput | number
    y?: FloatFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    productionLineId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: StringFieldUpdateOperationsInput | string
  }

  export type ProductionLineVersionUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumProductionLineStatusFieldUpdateOperationsInput | $Enums.ProductionLineStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: StringFieldUpdateOperationsInput | string
    entity?: ProductionLineUpdateOneRequiredWithoutVersionsNestedInput
  }

  export type ProductionLineVersionUncheckedUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumProductionLineStatusFieldUpdateOperationsInput | $Enums.ProductionLineStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: StringFieldUpdateOperationsInput | string
  }

  export type ProductionLineVersionUncheckedUpdateManyWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumProductionLineStatusFieldUpdateOperationsInput | $Enums.ProductionLineStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: StringFieldUpdateOperationsInput | string
  }

  export type ProductionLineUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumProductionLineStatusFieldUpdateOperationsInput | $Enums.ProductionLineStatus
    version?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: StringFieldUpdateOperationsInput | string
    processes?: ProcessUpdateManyWithoutProductionLineNestedInput
    versions?: ProductionLineVersionUpdateManyWithoutEntityNestedInput
  }

  export type ProductionLineUncheckedUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumProductionLineStatusFieldUpdateOperationsInput | $Enums.ProductionLineStatus
    version?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: StringFieldUpdateOperationsInput | string
    processes?: ProcessUncheckedUpdateManyWithoutProductionLineNestedInput
    versions?: ProductionLineVersionUncheckedUpdateManyWithoutEntityNestedInput
  }

  export type ProductionLineUncheckedUpdateManyWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumProductionLineStatusFieldUpdateOperationsInput | $Enums.ProductionLineStatus
    version?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: StringFieldUpdateOperationsInput | string
  }

  export type ProcessCreateManyProductionLineInput = {
    id?: string
    title: string
    description?: string | null
    duration?: number | null
    progress?: number
    status?: $Enums.ProcessStatus
    x?: number
    y?: number
    color?: string
    version?: number
    isActive?: boolean
    parentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: string
    reason: string
  }

  export type ProductionLineVersionCreateManyEntityInput = {
    id?: string
    version: number
    name: string
    status: $Enums.ProductionLineStatus
    createdAt?: Date | string
    createdBy: string
    reason: string
  }

  export type ProcessUpdateWithoutProductionLineInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    progress?: FloatFieldUpdateOperationsInput | number
    status?: EnumProcessStatusFieldUpdateOperationsInput | $Enums.ProcessStatus
    x?: FloatFieldUpdateOperationsInput | number
    y?: FloatFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: StringFieldUpdateOperationsInput | string
    versions?: ProcessVersionUpdateManyWithoutEntityNestedInput
    creator?: UserUpdateOneRequiredWithoutCreatedProcessesNestedInput
  }

  export type ProcessUncheckedUpdateWithoutProductionLineInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    progress?: FloatFieldUpdateOperationsInput | number
    status?: EnumProcessStatusFieldUpdateOperationsInput | $Enums.ProcessStatus
    x?: FloatFieldUpdateOperationsInput | number
    y?: FloatFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    versions?: ProcessVersionUncheckedUpdateManyWithoutEntityNestedInput
  }

  export type ProcessUncheckedUpdateManyWithoutProductionLineInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    progress?: FloatFieldUpdateOperationsInput | number
    status?: EnumProcessStatusFieldUpdateOperationsInput | $Enums.ProcessStatus
    x?: FloatFieldUpdateOperationsInput | number
    y?: FloatFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
  }

  export type ProductionLineVersionUpdateWithoutEntityInput = {
    id?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumProductionLineStatusFieldUpdateOperationsInput | $Enums.ProductionLineStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: StringFieldUpdateOperationsInput | string
    creator?: UserUpdateOneRequiredWithoutProductionLineVersionsCreatedNestedInput
  }

  export type ProductionLineVersionUncheckedUpdateWithoutEntityInput = {
    id?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumProductionLineStatusFieldUpdateOperationsInput | $Enums.ProductionLineStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
  }

  export type ProductionLineVersionUncheckedUpdateManyWithoutEntityInput = {
    id?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumProductionLineStatusFieldUpdateOperationsInput | $Enums.ProductionLineStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
  }

  export type ProcessVersionCreateManyEntityInput = {
    id?: string
    version: number
    title: string
    description?: string | null
    duration?: number | null
    progress: number
    status: $Enums.ProcessStatus
    x: number
    y: number
    color: string
    productionLineId: string
    createdAt?: Date | string
    createdBy: string
    reason: string
  }

  export type ProcessVersionUpdateWithoutEntityInput = {
    id?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    progress?: FloatFieldUpdateOperationsInput | number
    status?: EnumProcessStatusFieldUpdateOperationsInput | $Enums.ProcessStatus
    x?: FloatFieldUpdateOperationsInput | number
    y?: FloatFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    productionLineId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: StringFieldUpdateOperationsInput | string
    creator?: UserUpdateOneRequiredWithoutProcessVersionsCreatedNestedInput
  }

  export type ProcessVersionUncheckedUpdateWithoutEntityInput = {
    id?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    progress?: FloatFieldUpdateOperationsInput | number
    status?: EnumProcessStatusFieldUpdateOperationsInput | $Enums.ProcessStatus
    x?: FloatFieldUpdateOperationsInput | number
    y?: FloatFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    productionLineId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
  }

  export type ProcessVersionUncheckedUpdateManyWithoutEntityInput = {
    id?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    progress?: FloatFieldUpdateOperationsInput | number
    status?: EnumProcessStatusFieldUpdateOperationsInput | $Enums.ProcessStatus
    x?: FloatFieldUpdateOperationsInput | number
    y?: FloatFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    productionLineId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}